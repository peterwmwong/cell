// Generated by CoffeeScript 1.6.3
var __slice = [].slice;

define(function() {
  var ctx_name_salt, domFixture, unloadRequire;
  ctx_name_salt = 0;
  domFixture = document.getElementById('spec-fixture');
  unloadRequire = function(contextName) {
    var s, scripts, _i, _j, _len, _len1;
    delete window.require.s.contexts[contextName];
    if (document.querySelectorAll) {
      scripts = document.querySelectorAll("[data-requirecontext='" + contextName + "']");
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        s = scripts[_i];
        s.parentNode.removeChild(s);
      }
    } else {
      scripts = document.getElementsByTagName("script");
      for (_j = 0, _len1 = scripts.length; _j < _len1; _j++) {
        s = scripts[_j];
        if (s && (contextName === s.getAttribute('data-requirecontext'))) {
          s.parentNode.removeChild(s);
        }
      }
    }
  };
  return {
    load: function(name, req, load, config) {
      return req([name], function(Spec) {
        return load(function() {
          return describe(/.*\/specs\/(.*).spec$/.exec(name)[1], function() {
            var ctx, specRequire;
            specRequire = null;
            ctx = void 0;
            return Spec({
              beforeEachRequire: function(cb_mocks, deps, cb) {
                if (arguments.length === 2) {
                  cb = deps;
                  deps = cb_mocks;
                }
                beforeEach(function() {
                  var ctxName, dep_modules, mod_name, mod_obj, _fn;
                  this.domFixture = domFixture;
                  specRequire = window.require.config({
                    context: ctxName = "specs" + (ctx_name_salt++),
                    baseUrl: '../specs/',
                    paths: {
                      cell: '../src'
                    }
                  });
                  ctx = window.require.s.contexts[ctxName];
                  if (cb_mocks) {
                    _fn = function(mod_obj) {
                      var mod_map;
                      mod_map = ctx.makeModuleMap(mod_name, null, true);
                      return (ctx.registry[mod_name] = new ctx.Module(mod_map)).init([], function() {
                        return mod_obj;
                      }, void 0, {
                        enabled: true
                      });
                    };
                    for (mod_name in cb_mocks) {
                      mod_obj = cb_mocks[mod_name];
                      _fn(mod_obj);
                    }
                  }
                  dep_modules = void 0;
                  runs(function() {
                    return specRequire(deps, function() {
                      var dms;
                      dms = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                      return dep_modules = dms;
                    });
                  });
                  waitsFor(function() {
                    return dep_modules != null;
                  });
                  return runs(function() {
                    return cb.apply(this, dep_modules);
                  });
                });
                return afterEach(function() {
                  domFixture.innerHTML = '';
                  if (ctx) {
                    return unloadRequire(ctx.contextName);
                  }
                });
              }
            });
          });
        });
      });
    }
  };
});

/*
//@ sourceMappingURL=spec.map
*/
