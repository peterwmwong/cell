// Generated by CoffeeScript 1.4.0
var __slice = [].slice;

define(['jquery'], function($) {
  var ctx_name_salt, domFixture;
  ctx_name_salt = 0;
  domFixture = document.getElementById('spec-fixture');
  return {
    load: function(name, req, load, config) {
      return req([name], function(Spec) {
        return load(function() {
          return describe(/.*\/specs\/(.*).spec$/.exec(name)[1], function() {
            var ctx, specRequire;
            specRequire = null;
            ctx = void 0;
            return Spec({
              beforeEachRequire: function(prereqDeps, deps, cb) {
                if (arguments.length === 2) {
                  cb = deps;
                  deps = prereqDeps;
                  prereqDeps = void 0;
                }
                beforeEach(function() {
                  var ctxName, dep_modules, prereqdep_modules;
                  this.domFixture = domFixture;
                  specRequire = window.require.config({
                    context: ctxName = "specs" + (ctx_name_salt++),
                    baseUrl: '../specs/',
                    paths: {
                      cell: '../src/cell',
                      dom: '../src/dom',
                      util: '../src/util'
                    }
                  });
                  ctx = window.require.s.contexts[ctxName];
                  if (prereqDeps) {
                    prereqdep_modules = void 0;
                    runs(function() {
                      return specRequire(prereqDeps, function() {
                        var dms;
                        dms = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                        return prereqdep_modules = dms;
                      });
                    });
                    waitsFor(function() {
                      return prereqdep_modules != null;
                    });
                  }
                  dep_modules = void 0;
                  runs(function() {
                    return specRequire(deps, function() {
                      var dms;
                      dms = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                      return dep_modules = dms;
                    });
                  });
                  waitsFor(function() {
                    return dep_modules != null;
                  });
                  return runs(function() {
                    return cb.apply(this, dep_modules);
                  });
                });
                return afterEach(function() {
                  domFixture.innerHTML = '';
                  if (ctx) {
                    $("[data-requirecontext='" + ctx.contextName + "']").remove();
                    return delete window.require.s.contexts[ctx.contextName];
                  }
                });
              }
            });
          });
        });
      });
    }
  };
});
