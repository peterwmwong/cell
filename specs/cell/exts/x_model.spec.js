// Generated by CoffeeScript 1.4.0

define(['../../utils/spec-utils'], function(_arg) {
  var browserTrigger, node, waitOne;
  node = _arg.node, browserTrigger = _arg.browserTrigger, waitOne = _arg.waitOne;
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['cell/View', 'cell/Model', 'cell/exts/x_model'], function(View, Model, x_model) {
      this.View = View;
      this.Model = Model;
      this.x_model = x_model;
    });
    return describe('x_model( model_attr:string )', function() {
      beforeEach(function() {
        var _this = this;
        this.NewView = this.View.extend({
          render: function(__) {
            return [
              __('input', _this.x_model('text'), {
                type: 'text'
              }), __('input', _this.x_model('check'), {
                type: 'checkbox'
              })
            ];
          }
        });
        this.model = new this.Model({
          text: 'text value',
          check: true
        });
        return this.view = new this.NewView({
          model: this.model
        });
      });
      it('should render model attribute value to inputs', function() {
        expect(this.view.el.children[0].value).toBe('text value');
        return expect(this.view.el.children[1].checked).toBe(true);
      });
      it('view -> model', function() {
        var checkbox, text;
        text = this.view.el.children[0];
        text.value = 'new text value';
        browserTrigger(text, 'change');
        expect(this.model.attributes()).toEqual({
          text: 'new text value',
          check: true
        });
        checkbox = this.view.el.children[1];
        checkbox.checked = false;
        browserTrigger(checkbox, 'change');
        return expect(this.model.attributes()).toEqual({
          text: 'new text value',
          check: false
        });
      });
      return describe('model -> view', function() {
        beforeEach(function() {
          this.text = this.view.el.children[0];
          return this.checkbox = this.view.el.children[1];
        });
        it('text', function() {
          this.model.set('text', 'new text value');
          return waitOne(function() {
            expect(this.text.value).toBe('new text value');
            return expect(this.checkbox.checked).toBe(true);
          });
        });
        return it('check', function() {
          this.model.set('check', false);
          return waitOne(function() {
            expect(this.text.value).toBe('text value');
            return expect(this.checkbox.checked).toBe(false);
          });
        });
      });
    });
  };
});
