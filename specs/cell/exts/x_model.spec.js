// Generated by CoffeeScript 1.6.1

define(['../../utils/spec-utils'], function(_arg) {
  var browserTrigger, msie, node, waitOne;
  node = _arg.node, browserTrigger = _arg.browserTrigger, waitOne = _arg.waitOne, msie = _arg.msie;
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['cell/View', 'cell/Model', 'cell/exts/x_model'], function(View, Model, x_model) {
      this.View = View;
      this.Model = Model;
      this.x_model = x_model;
    });
    describe('x_model( model_attr:string, model:Model )', function() {
      beforeEach(function() {
        var x_model;
        x_model = this.x_model;
        this.NewView = this.View.extend({
          beforeRender: function() {
            return this.set('textarea', 'textarea value');
          },
          render: function(_) {
            return [_('textarea', x_model('textarea', this))];
          }
        });
        this.view = new this.NewView;
        return this.v_textarea = this.view.el.children[0];
      });
      describe('view -> model', function() {
        return it('textarea', function() {
          this.v_textarea.value = 'new textarea value';
          browserTrigger(this.v_textarea, 'keyup');
          return expect(this.view.get('textarea')).toEqual('new textarea value');
        });
      });
      return describe('model -> view', function() {
        return it('textarea', function() {
          this.view.set('textarea', 'new textarea value');
          return waitOne(function() {
            return expect(this.v_textarea.value).toBe('new textarea value');
          });
        });
      });
    });
    return describe('x_model( model_attr:string )', function() {
      beforeEach(function() {
        var _this = this;
        this.NewView = this.View.extend({
          render: function(_) {
            return [
              _this.v_textarea = _('textarea', _this.x_model('textarea'), _this.v_text = _('input', _this.x_model('text'), {
                type: 'text'
              })), _this.v_checkbox = _('input', _this.x_model('check'), {
                type: 'checkbox'
              }), _this.v_select = _('select', _this.x_model('select'), _('option', {
                value: 'two'
              }), _('option', {
                value: 'one'
              }), _('option', {
                value: 'three'
              }))
            ];
          }
        });
        this.model = new this.Model({
          textarea: 'textarea value',
          text: 'text value',
          check: true,
          select: 'one'
        });
        return this.view = new this.NewView({
          model: this.model
        });
      });
      it('should render model attribute value to inputs', function() {
        expect(this.v_textarea.value).toBe('textarea value');
        expect(this.v_text.value).toBe('text value');
        expect(this.v_checkbox.checked).toBe(true);
        return expect(this.v_select.value).toBe('one');
      });
      describe('view -> model', function() {
        it('text', function() {
          this.v_text.value = 'new text value';
          browserTrigger(this.v_text, 'keyup');
          return expect(this.model.attributes()).toEqual({
            textarea: 'textarea value',
            text: 'new text value',
            check: true,
            select: 'one'
          });
        });
        it('checkbox', function() {
          if (msie < 9) {
            this.v_checkbox.defaultChecked = false;
          } else {
            this.v_checkbox.checked = false;
          }
          browserTrigger(this.v_checkbox, 'change');
          return expect(this.model.attributes()).toEqual({
            textarea: 'textarea value',
            text: 'text value',
            check: false,
            select: 'one'
          });
        });
        it('select', function() {
          this.v_select.value = 'three';
          browserTrigger(this.v_select, 'change');
          return expect(this.model.attributes()).toEqual({
            textarea: 'textarea value',
            text: 'text value',
            check: true,
            select: 'three'
          });
        });
        return it('textarea', function() {
          this.v_textarea.value = 'new textarea value';
          browserTrigger(this.v_textarea, 'keyup');
          return expect(this.model.attributes()).toEqual({
            textarea: 'new textarea value',
            text: 'text value',
            check: true,
            select: 'one'
          });
        });
      });
      return describe('model -> view', function() {
        it('text', function() {
          this.model.set('text', 'new text value');
          return waitOne(function() {
            expect(this.v_text.value).toBe('new text value');
            expect(this.v_textarea.value).toBe('textarea value');
            expect(this.v_checkbox.checked).toBe(true);
            return expect(this.v_select.value).toBe('one');
          });
        });
        it('checkbox', function() {
          this.model.set('check', false);
          return waitOne(function() {
            expect(this.v_text.value).toBe('text value');
            expect(this.v_textarea.value).toBe('textarea value');
            expect(this.v_checkbox.checked).toBe(false);
            return expect(this.v_select.value).toBe('one');
          });
        });
        it('select', function() {
          this.model.set('select', 'three');
          return waitOne(function() {
            expect(this.v_text.value).toBe('text value');
            expect(this.v_textarea.value).toBe('textarea value');
            expect(this.v_checkbox.checked).toBe(true);
            return expect(this.v_select.value).toBe('three');
          });
        });
        return it('textarea', function() {
          this.model.set('textarea', 'new textarea value');
          return waitOne(function() {
            expect(this.v_text.value).toBe('text value');
            expect(this.v_textarea.value).toBe('new textarea value');
            expect(this.v_checkbox.checked).toBe(true);
            return expect(this.v_select.value).toBe('one');
          });
        });
      });
    });
  };
});
