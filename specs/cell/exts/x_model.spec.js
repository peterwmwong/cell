// Generated by CoffeeScript 1.4.0

define(['../../utils/spec-utils'], function(_arg) {
  var browserTrigger, node;
  node = _arg.node, browserTrigger = _arg.browserTrigger;
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['cell/opts/ViewExts', 'cell/opts/ViewBindings', 'cell/View', 'cell/exts/x_model'], function(ViewExts, ViewBindings, View, x_model) {
      this.ViewExts = ViewExts;
      this.ViewBindings = ViewBindings;
      this.View = View;
      this.x_model = x_model;
    });
    return describe('x_model( model_attr:string )', function() {
      beforeEach(function() {
        var _this = this;
        this.NewView = this.View.extend({
          render: function(__) {
            return [
              __('input', _this.x_model('text'), {
                type: 'text'
              }), __('input', _this.x_model('check'), {
                type: 'checkbox'
              })
            ];
          }
        });
        this.model = {
          text: 'text value',
          check: true
        };
        return this.view = new this.NewView({
          model: this.model
        });
      });
      it('should render model attribute value to inputs', function() {
        expect(this.view.el.children[0].value).toBe('text value');
        return expect(this.view.el.children[1].checked).toBe(true);
      });
      it('view -> model', function() {
        var checkbox, text;
        text = this.view.el.children[0];
        text.value = 'new text value';
        browserTrigger(text, 'change');
        expect(this.model).toEqual({
          text: 'new text value',
          check: true
        });
        checkbox = this.view.el.children[1];
        checkbox.checked = false;
        browserTrigger(checkbox, 'change');
        return expect(this.model).toEqual({
          text: 'new text value',
          check: false
        });
      });
      return it('model -> view', function() {
        var checkbox, text;
        text = this.view.el.children[0];
        checkbox = this.view.el.children[1];
        this.model.text = 'new text value';
        this.view.updateBinds();
        expect(text.value).toBe('new text value');
        expect(checkbox.checked).toBe(true);
        this.model.check = false;
        this.view.updateBinds();
        expect(text.value).toBe('new text value');
        return expect(checkbox.checked).toBe(false);
      });
    });
  };
});
