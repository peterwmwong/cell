// Generated by CoffeeScript 1.4.0

define(['../utils/spec-utils'], function(_arg) {
  var browserTrigger, node;
  node = _arg.node, browserTrigger = _arg.browserTrigger;
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['cell/View'], function(View) {
      this.View = View;
    });
    describe('View( options?:object )', function() {
      it('sets @options', function() {
        var View, o1;
        View = this.View.extend();
        expect((new View(o1 = {})).options).toBe(o1);
        expect((new View).options).toEqual({});
        return expect((new View(void 0)).options).toEqual({});
      });
      return describe('sets @el', function() {
        beforeEach(function() {
          var _this = this;
          this.el = document.createElement('div');
          this.childEl = document.createElement('span');
          this.log = [];
          this.NewView = this.View.extend({
            beforeRender: function() {
              return _this.log.push('beforeRender');
            },
            render_el: function() {
              _this.log.push('render_el');
              return _this.el;
            },
            render: function(__) {
              _this.log.push('render');
              return _this.childEl;
            },
            afterRender: function() {
              return _this.log.push('afterRender');
            }
          });
          return this.view = new this.NewView();
        });
        it('calls View::render_el() to set @el', function() {
          return expect(this.view.el).toBe(this.el);
        });
        it('calls View::render() to set contents of @el', function() {
          expect(this.view.el.children.length).toBe(1);
          return expect(this.view.el.children[0]).toEqual(this.childEl);
        });
        return it('calls functions in this order: beforeRender(), render_el(), render() and finally afterRender()', function() {
          return expect(this.log).toEqual(['beforeRender', 'render_el', 'render', 'afterRender']);
        });
      });
    });
    return describe('@remove()', function() {
      beforeEach(function() {
        var View,
          _this = this;
        this.clickHandler = jasmine.createSpy('click');
        View = this.View.extend({
          render: function(__) {
            return [
              __('.clickable', {
                onclick: _this.clickHandler
              })
            ];
          }
        });
        this.parent = node('div');
        this.view = new View;
        return this.parent.appendChild(this.view.el);
      });
      it('removes event handlers', function() {
        var clickable;
        clickable = this.view.el.children[0];
        browserTrigger(clickable, 'click');
        expect(this.clickHandler).toHaveBeenCalled();
        this.clickHandler.reset();
        this.view.remove();
        browserTrigger(clickable, 'click');
        return expect(this.clickHandler).not.toHaveBeenCalled();
      });
      it('removes @el from parent', function() {
        this.view.remove();
        return expect(this.parent.children.length).toBe(0);
      });
      return it('removes @el itself', function() {
        this.view.remove();
        return expect(this.view.el).toBeUndefined();
      });
    });
  };
});
