// Generated by CoffeeScript 1.6.1

define(['../utils/spec-utils'], function(_arg) {
  var waitOne;
  waitOne = _arg.waitOne;
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['cell/Ext', 'cell/Model'], function(Ext, Model) {
      this.Ext = Ext;
      this.Model = Model;
    });
    return describe('Ext.extend({render:function})', function() {
      beforeEach(function() {
        return this.NewExt = this.Ext.extend({
          render: function() {}
        });
      });
      it('returns an Ext class', function() {
        return expect((new this.NewExt) instanceof this.Ext).toBe(true);
      });
      return describe('@constructor( options )', function() {
        beforeEach(function() {
          return this.newext = this.NewExt(this.options = {});
        });
        it('can be called without new', function() {
          return expect(this.NewExt() instanceof this.Ext).toBe(true);
        });
        it('sets @options', function() {
          return expect(this.newext.options).toBe(this.options);
        });
        describe('@run( element, view ) # Called by the View when rendering', function() {
          beforeEach(function() {
            var element, view;
            element = {};
            view = {};
            spyOn(this.newext, 'render').andCallFake(function() {
              expect(this.el).toBe(element);
              return expect(this.view).toBe(view);
            });
            return this.newext.run(element, view);
          });
          return it('calls render(), with `this` set properly', function() {
            expect(this.newext.render.callCount).toBe(1);
            expect(this.newext.render).toHaveBeenCalledWith();
            return expect(this.newext.render.calls[0].object).toBe(this.newext);
          });
        });
        return describe('@watch( value:any, callback:function )', function() {
          var nonFunc, _fn, _i, _len, _ref;
          beforeEach(function() {
            this.newext.view = {};
            return this.callback = jasmine.createSpy('callback');
          });
          _ref = [0, void 0, null, 'test string', {}];
          _fn = function(nonFunc) {
            return describe("when value is NOT a function (" + nonFunc + " : " + (typeof nonFunc) + ")", function() {
              beforeEach(function() {
                return this.newext.watch(nonFunc, this.callback);
              });
              return it('calls callback( value )', function() {
                return expect(this.callback).toHaveBeenCalledWith(nonFunc);
              });
            });
          };
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            nonFunc = _ref[_i];
            _fn(nonFunc);
          }
          return describe('when value is a function', function() {
            beforeEach(function() {
              var _this = this;
              this.watchedModel = new this.Model({
                a: 5
              });
              this.watchedFunc = jasmine.createSpy('watchedFunc').andCallFake(function() {
                return _this.watchedModel.get('a');
              });
              return this.newext.watch(this.watchedFunc, this.callback);
            });
            it('calls callback with what is returned from calling value', function() {
              expect(this.watchedFunc.callCount).toBe(1);
              expect(this.watchedFunc.calls[0].object).toBe(this.newext.view);
              expect(this.callback.callCount).toBe(1);
              expect(this.callback).toHaveBeenCalledWith(5);
              return expect(this.callback.calls[0].object).toBe(this.newext);
            });
            return describe('when watched value function changes (accessed Model/Collection changes)', function() {
              beforeEach(function() {
                this.watchedFunc.reset();
                this.callback.reset();
                return this.watchedModel.set('a', 6);
              });
              return it('calls callback again with what is returned from calling value again', function() {
                return waitOne(function() {
                  expect(this.watchedFunc.callCount).toBe(1);
                  expect(this.watchedFunc.calls[0].object).toBe(this.newext.view);
                  expect(this.callback.callCount).toBe(1);
                  expect(this.callback).toHaveBeenCalledWith(6);
                  return expect(this.callback.calls[0].object).toBe(this.newext);
                });
              });
            });
          });
        });
      });
    });
  };
});
