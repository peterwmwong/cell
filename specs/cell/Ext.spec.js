// Generated by CoffeeScript 1.4.0

define(function() {
  return function(_arg) {
    var beforeEachRequire;
    beforeEachRequire = _arg.beforeEachRequire;
    beforeEachRequire(['cell/Ext'], function(Ext) {
      this.Ext = Ext;
    });
    return describe('Ext.extend(func:function)', function() {
      beforeEach(function() {
        return this.NewExt = this.Ext.extend({
          func: this.func = jasmine.createSpy('extend func')
        });
      });
      it('returns an Ext class', function() {
        return expect((new this.NewExt) instanceof this.Ext).toBe(true);
      });
      return describe('@constructor( options )', function() {
        beforeEach(function() {
          return this.newext = this.NewExt(this.options = {});
        });
        it('can be called without new', function() {
          return expect(this.NewExt() instanceof this.Ext).toBe(true);
        });
        it('sets @options', function() {
          return expect(this.newext.options).toBe(this.options);
        });
        describe('@run( element, view )', function() {
          beforeEach(function() {
            return this.newext.run((this.element = {}), (this.view = {}));
          });
          return it('calls func( element, @options, @getValue, view ), with this set properly', function() {
            expect(this.func.callCount).toBe(1);
            expect(this.func).toHaveBeenCalledWith(this.element, this.options, this.newext.getValue, this.view);
            return expect(this.func.calls[0].object).toBe(this.newext);
          });
        });
        return describe('@getValue( value:any, callback:function )', function() {
          var nonFunc, _i, _len, _ref, _results;
          beforeEach(function() {
            return this.callback = jasmine.createSpy('callback');
          });
          describe('when value is a function', function() {
            beforeEach(function() {
              var _this = this;
              this.value = {};
              return this.newext.getValue((function() {
                return _this.value;
              }), this.callback);
            });
            return it('calls callback( value() )', function() {
              return expect(this.callback).toHaveBeenCalledWith(this.value);
            });
          });
          _ref = [0, void 0, null, 'test string', {}];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            nonFunc = _ref[_i];
            _results.push((function(nonFunc) {
              return describe("when value is NOT a function (" + nonFunc + " : " + (typeof nonFunc) + ")", function() {
                beforeEach(function() {
                  return this.newext.getValue(nonFunc, this.callback);
                });
                return it('calls callback( value )', function() {
                  return expect(this.callback).toHaveBeenCalledWith(nonFunc);
                });
              });
            })(nonFunc));
          }
          return _results;
        });
      });
    });
  };
});
