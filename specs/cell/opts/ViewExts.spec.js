// Generated by CoffeeScript 1.4.0
var __slice = [].slice;

define(['../../utils/spec-utils'], function(_arg) {
  var node;
  node = _arg.node;
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['cell/Ext', 'cell/View', 'require'], function(Ext, View, require) {
      this.Ext = Ext;
      this.View = View;
      this.require = require;
    });
    return describe('modifies View.__() method signature ( viewOrSelector:[View, String], exts...:Ext, attrHash_or_options?:Object, children...:[DOMElement, String, Number, Array, jQuery] )', function() {
      beforeEach(function() {
        this.x_test1 = this.Ext.extend({
          func: this.x_test1_func = jasmine.createSpy('x_test1_func')
        });
        this.x_test2 = this.Ext.extend({
          func: this.x_test2_func = jasmine.createSpy('x_test2_func')
        });
        this.view = new this.View;
        return this.__ = this.view.__;
      });
      describe('__( selector:String, exts...:Ext )', function() {
        beforeEach(function() {
          return this.result = this.__('.myClass', this.x_test1_instance = this.x_test1(this.x_test1_options = {}), this.x_test2_instance = this.x_test2(this.x_test2_options = {}));
        });
        return it('calls Ext.run(element) for each ext', function() {
          expect(this.x_test1_func).toHaveBeenCalledWith(this.result, this.x_test1_options, this.x_test1_instance.getValue, this.view);
          expect(this.x_test1_func.callCount).toBe(1);
          expect(this.x_test2_func).toHaveBeenCalledWith(this.result, this.x_test2_options, this.x_test2_instance.getValue, this.view);
          return expect(this.x_test2_func.callCount).toBe(1);
        });
      });
      describe('__( selector:String, exts...:Ext, attrHash_or_options:Object )', function() {
        beforeEach(function() {
          return this.result = this.__('.myClass', this.x_test1_instance = this.x_test1(this.x_test1_options = {}), this.x_test2_instance = this.x_test2(this.x_test2_options = {}), this.options = {
            a: 1
          });
        });
        return it('calls Ext.run(element) for each ext', function() {
          expect(this.x_test1_func).toHaveBeenCalledWith(this.result, this.x_test1_options, this.x_test1_instance.getValue, this.view);
          expect(this.x_test1_func.callCount).toBe(1);
          expect(this.x_test2_func).toHaveBeenCalledWith(this.result, this.x_test2_options, this.x_test2_instance.getValue, this.view);
          return expect(this.x_test2_func.callCount).toBe(1);
        });
      });
      describe('__( selector:String, exts...:Ext, attrHash_or_options:Object, children...:[DOMElement, String, Number, Array] )', function() {
        beforeEach(function() {
          return this.result = this.__.apply(this, [(this.sel_arg = '.myClass'), this.x_test1_instance = this.x_test1(this.x_test1_options = {}), this.x_test2_instance = this.x_test2(this.x_test2_options = {}), this.options = {
            a: 1
          }].concat(__slice.call((this.child_args = [node('a'), 'hello', 0, [node('b'), 'bye', 1]]))));
        });
        return it('calls Ext.run(element) for each ext', function() {
          expect(this.x_test1_func).toHaveBeenCalledWith(this.result, this.x_test1_options, this.x_test1_instance.getValue, this.view);
          expect(this.x_test1_func.callCount).toBe(1);
          expect(this.x_test2_func).toHaveBeenCalledWith(this.result, this.x_test2_options, this.x_test2_instance.getValue, this.view);
          return expect(this.x_test2_func.callCount).toBe(1);
        });
      });
      return describe('__( selector:String, exts...:Ext, children...:[DOMElement, String, Number, Array] )', function() {
        beforeEach(function() {
          return this.result = this.__.apply(this, [(this.sel_arg = '.myClass'), this.x_test1_instance = this.x_test1(this.x_test1_options = {}), this.x_test2_instance = this.x_test2(this.x_test2_options = {})].concat(__slice.call((this.child_args = [node('a'), 'hello', 0, [node('b'), 'bye', 1]]))));
        });
        return it('calls Ext.run(element) for each ext', function() {
          expect(this.x_test1_func).toHaveBeenCalledWith(this.result, this.x_test1_options, this.x_test1_instance.getValue, this.view);
          expect(this.x_test1_func.callCount).toBe(1);
          expect(this.x_test2_func).toHaveBeenCalledWith(this.result, this.x_test2_options, this.x_test2_instance.getValue, this.view);
          return expect(this.x_test2_func.callCount).toBe(1);
        });
      });
    });
  };
});
