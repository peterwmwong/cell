// Generated by CoffeeScript 1.4.0

define(function() {
  return function(_arg) {
    var beforeEachRequire;
    beforeEachRequire = _arg.beforeEachRequire;
    beforeEachRequire(['cell/Model', 'cell/Collection', 'cell/util/Observer'], function(Model, Collection, Observer) {
      this.Model = Model;
      this.Collection = Collection;
      this.Observer = Observer;
      return this.watch = this.Observer.watch;
    });
    return describe('@watch( func:function, callback:function )', function() {
      beforeEach(function() {
        this.value = {};
        return this.callback = jasmine.createSpy('callback');
      });
      describe("When func does NOT access any Model or Collection", function() {
        beforeEach(function() {
          this.func = jasmine.createSpy('func').andReturn(this.value);
          return this.watch(this.func, this.callback);
        });
        return it('call callback with result of func', function() {
          expect(this.func).toHaveBeenCalled();
          expect(this.func.callCount).toBe(1);
          expect(this.callback).toHaveBeenCalledWith(this.value);
          return expect(this.callback.callCount).toBe(1);
        });
      });
      return describe("When func accesses a Model's properties", function() {
        beforeEach(function() {
          var _this = this;
          this.model = new this.Model({
            a: 1,
            b: {},
            c: 'x'
          });
          this.func = jasmine.createSpy('func').andCallFake(function() {
            _this.model.get('c');
            return _this.model.get('a');
          });
          return this.watch(this.func, this.callback);
        });
        it('call @callback with result of func', function() {
          expect(this.func).toHaveBeenCalled();
          expect(this.func.callCount).toBe(1);
          expect(this.callback).toHaveBeenCalledWith(1);
          return expect(this.callback.callCount).toBe(1);
        });
        describe('when the accessed model property changes', function() {
          beforeEach(function() {
            this.func.reset();
            this.callback.reset();
            return this.model.set('a', 2);
          });
          it('calls callback with result of func', function() {
            expect(this.func).toHaveBeenCalled();
            expect(this.func.callCount).toBe(1);
            expect(this.callback).toHaveBeenCalledWith(2);
            return expect(this.callback.callCount).toBe(1);
          });
          return describe('when another accessed model property changes', function() {
            beforeEach(function() {
              this.func.reset();
              this.callback.reset();
              return this.model.set('c', 'y');
            });
            return it('calls callback with result of func', function() {
              expect(this.func).toHaveBeenCalled();
              expect(this.func.callCount).toBe(1);
              expect(this.callback).toHaveBeenCalledWith(2);
              return expect(this.callback.callCount).toBe(1);
            });
          });
        });
        return describe('when another model property changes or other non-relevant events occur', function() {
          beforeEach(function() {
            this.func.reset();
            this.callback.reset();
            this.model.set('b', 2);
            return this.model.trigger('bogus');
          });
          return it('calls callback with result of func', function() {
            expect(this.func).not.toHaveBeenCalled();
            return expect(this.callback).not.toHaveBeenCalled();
          });
        });
      });
    });
  };
});
