// Generated by CoffeeScript 1.4.0

define(['jquery', '../utils/spec-utils'], function($, _arg) {
  var msie, nodeToHTML;
  nodeToHTML = _arg.nodeToHTML, msie = _arg.msie;
  return function(_arg1) {
    var beforeEachRequire, load_fixture;
    beforeEachRequire = _arg1.beforeEachRequire;
    load_fixture = function(iframe_src, cb) {
      var $fixture_container, waitFor;
      $fixture_container = $('#spec-fixture');
      $fixture_container.empty().html("<iframe src='" + iframe_src + "'></iframe>");
      waitFor = function() {
        var $f, $fix;
        $fix = $('html', $('iframe', $fixture_container)[0].contentDocument);
        $f = function(sel) {
          return $(sel, $fix);
        };
        if ($f('body > *').length > 1) {
          return cb($f);
        } else {
          return setTimeout(waitFor, 20);
        }
      };
      return waitFor();
    };
    describe('@repathCSSRelativeURL(cssContents, cssFilePath, baseUrl)', function() {
      beforeEach(function() {
        var _this = this;
        window.process = {
          versions: {
            node: '0.8.11'
          }
        };
        return window.require.nodeRequire = function(dep) {
          if (dep === 'path') {
            return _this.path = {
              dirname: jasmine.createSpy('path.dirname').andCallFake(function(a) {
                return "path_dirname(" + a + ")";
              }),
              join: jasmine.createSpy('path.join').andCallFake(function(a, b) {
                return "path_join(" + a + "," + b + ")";
              }),
              relative: jasmine.createSpy('path.relative').andCallFake(function(a, b) {
                return "path_relative(" + a + "," + b + ")";
              })
            };
          }
        };
      });
      afterEach(function() {
        delete window.process;
        return delete window.require.nodeRequire;
      });
      beforeEachRequire(['cell/defineView-builder-plugin'], function(defineViewPlugin) {
        this.defineViewPlugin = defineViewPlugin;
      });
      return it("repath relative url()'s to be rooted to the project", function() {
        var baseUrl, cssContents, cssFilePath, result;
        cssContents = ".hasRelativeURL1 {\n  background-image: url('./three/img.png');\n}\n.hasRelativeURL2 {\n  background-image:url(three/img.png);\n}\n.hasRelativeURL3 {\n  background-image: \turl(\"three/img.png\");\n}\n.hasAbsoluteURL1 {\n  background-image: url('/abs/img.png');\n}\n.hasAbsoluteURL1 {\n  background-image: url('https://www.google.com/images/srpr/logo3w.png');\n}";
        cssFilePath = '/one/two/cssFile.css';
        baseUrl = '/one/';
        result = this.defineViewPlugin.repathCSSRelativeURL(cssContents, cssFilePath, baseUrl);
        return expect(result).toEqual((function() {
          return ".hasRelativeURL1 {\n  background-image: url('path_relative(/one/,path_join(path_dirname(/one/two/cssFile.css),./three/img.png))');\n}\n.hasRelativeURL2 {\n  background-image: url('path_relative(/one/,path_join(path_dirname(/one/two/cssFile.css),three/img.png))');\n}\n.hasRelativeURL3 {\n  background-image: url('path_relative(/one/,path_join(path_dirname(/one/two/cssFile.css),three/img.png))');\n}\n.hasAbsoluteURL1 {\n  background-image: url('/abs/img.png');\n}\n.hasAbsoluteURL1 {\n  background-image: url('https://www.google.com/images/srpr/logo3w.png');\n}";
        })());
      });
    });
    return describe('A single JS and single CSS are created correctly', function() {
      beforeEach(function() {
        this.$f = void 0;
        runs(function() {
          var _this = this;
          return load_fixture('../specs/fixtures/defineView-builder-plugin/index.html', function($f) {
            _this.$f = $f;
          });
        });
        return waitsFor(function() {
          return this.$f != null;
        });
      });
      afterEach(function() {
        return $('#spec-fixture').empty();
      });
      it("Should render Mock and MockNested Cells", function() {
        return expect(nodeToHTML(this.$f('body')[0])).toMatch(/<div cell="Mock" class="Mock">Mock: <div cell="MockNested" class="MockNested">MockNested<\/div><\/div>/);
      });
      it("Should apply Mock css from all.css", function() {
        return expect(this.$f('.Mock').css('color')).toBe((msie < 9 ? '#00f' : 'rgb(0, 0, 255)'));
      });
      it("Should repath CSS urls", function() {
        return expect(this.$f('.MockNested').css('background-image')).toMatch(/specs\/fixtures\/defineView-builder-plugin\/dir\/logo.png/);
      });
      it("Should apply MockNested css from all.css", function() {
        return expect(this.$f('.MockNested').css('color')).toBe((msie < 9 ? '#f00' : 'rgb(255, 0, 0)'));
      });
      it("Should NOT attach <link> for Mock.css", function() {
        return expect(this.$f('head > link[href*="Mock.css"]').length).toBe(0);
      });
      return it("Should NOT attach <link> for MockNested.css", function() {
        return expect(this.$f('head > link[href*="MockNested.css"]').length).toBe(0);
      });
    });
  };
});
