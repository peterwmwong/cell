// Generated by CoffeeScript 1.4.0

define(function() {
  return function(_arg) {
    var NON_STRINGS, beforeEachRequire;
    beforeEachRequire = _arg.beforeEachRequire;
    NON_STRINGS = [void 0, null, 5, (function() {}), [], {}];
    beforeEachRequire(['cell/Model'], function(Model) {
      this.Model = Model;
    });
    describe('@constructor(initial_hash)', function() {
      describe('when initial_hash is NOT undefined', function() {
        beforeEach(function() {
          return this.model = new this.Model({
            a: 'a val',
            b: 'b val',
            c: 'c val'
          });
        });
        return it('current attributes are same as initial_hash', function() {
          var k, v, _ref, _results;
          _ref = {
            a: 'a val',
            b: 'b val',
            c: 'c val'
          };
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push(expect(this.model.get(k)).toBe(v));
          }
          return _results;
        });
      });
      return describe('when initial_hash is undefined', function() {
        beforeEach(function() {
          return this.model = new this.Model();
        });
        return it('current attributes are same as initial_hash', function() {
          return expect(this.model._a).toEqual({});
        });
      });
    });
    describe('@attributes()', function() {
      beforeEach(function() {
        return this.model = new this.Model({
          a: 'a val',
          b: 'b val',
          c: 'c val'
        });
      });
      return it('returns a copied object of all attributes', function() {
        var attrs;
        attrs = this.model.attributes();
        expect(attrs).toEqual({
          a: 'a val',
          b: 'b val',
          c: 'c val'
        });
        attrs.a = 'a val 2';
        return expect(this.model.get('a')).toBe('a val');
      });
    });
    describe('@get(key)', function() {
      beforeEach(function() {
        return this.model = new this.Model({
          a: 'a val',
          b: 'b val',
          c: 'c val'
        });
      });
      describe('when key is not already set', function() {
        return it('returns undefined', function() {
          return expect(this.model.get('z')).toBe(void 0);
        });
      });
      describe('when key is set', function() {
        return it('returns value of key', function() {
          return expect(this.model.get('a')).toBe('a val');
        });
      });
      return describe('when key is invalid (non-string)', function() {
        return it('returns undefined', function() {
          var key, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = NON_STRINGS.length; _i < _len; _i++) {
            key = NON_STRINGS[_i];
            _results.push(expect(this.model.get(key)).toBe(void 0));
          }
          return _results;
        });
      });
    });
    describe('@set(key,value)', function() {
      beforeEach(function() {
        return this.model = new this.Model({
          a: 'a val',
          b: 'b val',
          c: 'c val'
        });
      });
      describe('when overwriting with a different value', function() {
        beforeEach(function() {
          this.model.on('change:b', (this.on_change_spy = jasmine.createSpy('change:b')));
          return this.model.set('b', 'new b value');
        });
        it('sets the new value', function() {
          return expect(this.model.get('b')).toBe('new b value');
        });
        return it('fires one "change:b" event', function() {
          expect(this.on_change_spy.argsForCall.length).toBe(1);
          return expect(this.on_change_spy).toHaveBeenCalledWith('change:b', this.model, 'new b value', 'b val');
        });
      });
      describe('when overwriting with the same value', function() {
        beforeEach(function() {
          this.model.on('change:b', (this.on_change_spy = jasmine.createSpy('change:b')));
          return this.model.set('b', 'b val');
        });
        it('value continues to be the same', function() {
          return expect(this.model.get('b')).toBe('b val');
        });
        return it('does NOT fire a "change:b" event', function() {
          return expect(this.on_change_spy).not.toHaveBeenCalled();
        });
      });
      return describe('when key is invalid (non-string)', function() {
        var key, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = NON_STRINGS.length; _i < _len; _i++) {
          key = NON_STRINGS[_i];
          _results.push((function(key) {
            beforeEach(function() {
              this.model.on('change:a', (this.on_change_spy_a = jasmine.createSpy('change:a')));
              this.model.on('change:b', (this.on_change_spy_b = jasmine.createSpy('change:b')));
              this.model.on('change:c', (this.on_change_spy_c = jasmine.createSpy('change:c')));
              return this.model.set(key, 'blah');
            });
            it('no values are changed', function() {
              expect(this.model.get('a')).toBe('a val');
              expect(this.model.get('b')).toBe('b val');
              return expect(this.model.get('c')).toBe('c val');
            });
            return it('no change events were fired', function() {
              expect(this.on_change_spy_a).not.toHaveBeenCalled();
              expect(this.on_change_spy_b).not.toHaveBeenCalled();
              return expect(this.on_change_spy_c).not.toHaveBeenCalled();
            });
          })(key));
        }
        return _results;
      });
    });
    return describe('@onChangeAndDo(propertyName:string, change_handler:function)', function() {
      beforeEach(function() {
        return this.model = new this.Model({
          a: 'a val',
          b: 'b val',
          c: 'c val'
        });
      });
      it('calls change_handler with current value of key', function() {
        var change_handler;
        this.model.onChangeAndDo('a', (change_handler = jasmine.createSpy('change_handler')));
        expect(change_handler.argsForCall.length).toBe(1);
        return expect(change_handler).toHaveBeenCalledWith('initial:a', this.model, 'a val');
      });
      return it('calls change_handler when key is changed', function() {
        var change_handler;
        this.model.onChangeAndDo('a', (change_handler = jasmine.createSpy('change_handler')));
        change_handler.reset();
        this.model.set('a', 'a new val');
        expect(change_handler.argsForCall.length).toBe(1);
        return expect(change_handler).toHaveBeenCalledWith('change:a', this.model, 'a new val', 'a val');
      });
    });
  };
});
