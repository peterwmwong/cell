// Generated by CoffeeScript 1.4.0
var __slice = [].slice;

define(['./utils/spec-utils'], function(_arg) {
  var node, nodeHTMLEquals, stringify, verify_is_jQueryish;
  nodeHTMLEquals = _arg.nodeHTMLEquals, stringify = _arg.stringify, node = _arg.node;
  verify_is_jQueryish = function(obj) {
    return expect(Object.getPrototypeOf(obj)).toBe($.fn);
  };
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    describe('Bindings: Bound function expressions', function() {
      beforeEachRequire(['cell'], function(_arg2) {
        this.Cell = _arg2.Cell;
        this.cell = new this.Cell();
        this.cell.test = 'test val';
        return this.__ = this.cell.__;
      });
      describe('when the bind is passed as an attribute', function() {
        beforeEach(function() {
          return this.node = this.__('.bound', {
            'data-custom': function() {
              return this.test;
            }
          });
        });
        it("sets initial value of bindings's value to the element's attribute", function() {
          return expect(this.node.getAttribute('data-custom')).toBe('test val');
        });
        return describe("when the bindings's value changes and @updateBinds() is called", function() {
          beforeEach(function() {
            this.cell.test = 'test val2';
            return this.cell.updateBinds();
          });
          return it("automatically sets value of the element's attribute to the new binding's value", function() {
            return expect(this.node.getAttribute('data-custom')).toBe('test val2');
          });
        });
      });
      return describe("when the bind is passed as a child", function() {
        var describe_render_reference;
        describe_render_reference = function(_arg2) {
          var expected_child_html, expected_child_html_after, ref_value, ref_value_after, value_type;
          value_type = _arg2.value_type, ref_value = _arg2.ref_value, ref_value_after = _arg2.ref_value_after, expected_child_html = _arg2.expected_child_html, expected_child_html_after = _arg2.expected_child_html_after;
          return describe("when the bindings's value is of type " + value_type, function() {
            beforeEach(function() {
              this.cell.test = ref_value;
              return this.node = this.__('.parent', 'BEFORE', function() {
                return this.test;
              }, 'AFTER');
            });
            it("child is rendered correctly", function() {
              return nodeHTMLEquals(this.node, "<div class=\"parent\">BEFORE" + expected_child_html + "AFTER</div>");
            });
            return describe("when the bindings's value changes and @updateBinds() is called", function() {
              beforeEach(function() {
                this.cell.test = ref_value_after;
                return this.cell.updateBinds();
              });
              return it("automatically rerenders child correctly", function() {
                return nodeHTMLEquals(this.node, "<div class=\"parent\">BEFORE" + expected_child_html_after + "AFTER</div>");
              });
            });
          });
        };
        describe_render_reference({
          value_type: 'DOMNode',
          ref_value: node('a'),
          ref_value_after: node('b'),
          expected_child_html: '<a></a>',
          expected_child_html_after: '<b></b>'
        });
        describe_render_reference({
          value_type: 'String',
          ref_value: 'Hello World!',
          ref_value_after: 'Goodbye!',
          expected_child_html: 'Hello World!',
          expected_child_html_after: 'Goodbye!'
        });
        describe_render_reference({
          value_type: 'Number',
          ref_value: 0,
          ref_value_after: 1,
          expected_child_html: '0',
          expected_child_html_after: '1'
        });
        describe_render_reference({
          value_type: 'jQuery',
          ref_value: $('<div class="initial"></div>'),
          ref_value_after: $('<div class="after"></div>'),
          expected_child_html: '<div class="initial"></div>',
          expected_child_html_after: '<div class="after"></div>'
        });
        return describe_render_reference({
          value_type: 'Array',
          ref_value: ['Hello World!', 0, $('<div class="initial"></div>')],
          ref_value_after: ['Goodbye!', 1, $('<div class="after"></div>')],
          expected_child_html: 'Hello World!0<div class="initial"></div>',
          expected_child_html_after: 'Goodbye!1<div class="after"></div>'
        });
      });
    });
    describe('Cell.prototype.render is modified', function() {
      beforeEachRequire(['cell'], function(_arg2) {
        var C, Cell, c;
        Cell = _arg2.Cell;
        C = Cell.extend({
          renderEl: this.renderEl = jasmine.createSpy('renderEl')
        });
        c = new C();
        this.__ = c.__;
        return c.render();
      });
      return it('calls Cell.renderEl(__)', function() {
        return expect(this.renderEl).toHaveBeenCalledWith(this.__);
      });
    });
    return describe('__( viewOrSelector:[Backbone.View, String], attrHash_or_options?:Object, children:[DOMNode, String, Number, Array, jQuery] )', function() {
      var empty, it_renders, it_renders_views, _fn, _i, _len, _ref;
      beforeEachRequire(["fixtures/TestCell1", 'cell'], function(TestCell1, _arg2) {
        var Cell;
        this.TestCell1 = TestCell1;
        Cell = _arg2.Cell;
        return this.__ = new Cell().__;
      });
      it_renders = function(desc, input_args, expected_html_output, debug) {
        return describe("__( " + desc + " )", function() {
          var input_strings;
          input_strings = stringify(input_args, true);
          return it("__( " + input_strings + " ) === " + expected_html_output, function() {
            if (debug) {
              debugger;
            }
            return nodeHTMLEquals(this.__.apply(this, input_args), expected_html_output);
          });
        });
      };
      it_renders_views = function(desc, input_args, expected_html_output, debug) {
        return describe("__( " + desc + " )", function() {
          var input_strings;
          input_strings = stringify(input_args, true);
          return it("__( Backbone.View, " + input_strings + " ) === " + expected_html_output, function() {
            if (debug) {
              debugger;
            }
            return nodeHTMLEquals(this.__.apply(this, [this.TestCell1].concat(__slice.call(input_args))), expected_html_output);
          });
        });
      };
      describe("__( function )", function() {
        return it("__( function ) === undefined", function() {
          return expect(this.__(function() {})).toBe(void 0);
        });
      });
      _ref = [void 0, null];
      _fn = function(empty) {
        var empty_str;
        empty_str = "" + (empty === '' && '""' || empty);
        return describe("__( " + empty_str + " )", function() {
          return it("__( " + empty_str + " ) === undefined", function() {
            return expect(this.__(empty)).toBe(void 0);
          });
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        empty = _ref[_i];
        _fn(empty);
      }
      it_renders('empty string', [''], '<div></div>');
      it_renders('selector:String(tag, id, multiple classes)', ['p#myid.myclass.myclass2'], '<p class="myclass myclass2" id="myid"></p>');
      it_renders('selector:String, child:String', ['p#myid.myclass.myclass2', 'blargo'], '<p class="myclass myclass2" id="myid">blargo</p>');
      it_renders("selector:String, child:String('<')", ['p#myid.myclass.myclass2', '<'], '<p class="myclass myclass2" id="myid"><</p>');
      it_renders('selector:String, child:Number', ['p#myid.myclass.myclass2', 777], '<p class="myclass myclass2" id="myid">777</p>');
      it_renders('selector:String, child:Number(0)', ['p#myid.myclass.myclass2', 0], '<p class="myclass myclass2" id="myid">0</p>');
      it_renders('selector:String, child:DOMNode', ['p#myid.myclass.myclass2', node('span')], '<p class="myclass myclass2" id="myid"><span></span></p>');
      it_renders('selector:String, child:jQuery', ['p#myid.myclass.myclass2', $('<span></span>')], '<p class="myclass myclass2" id="myid"><span></span></p>');
      it_renders('selector:String, child:jQuery', ['p#myid.myclass.myclass2', $('<span></span>')], '<p class="myclass myclass2" id="myid"><span></span></p>');
      (function() {
        var mock_date;
        mock_date = new Date();
        return it_renders('selector:String, child:Date', ['p#myid.myclass.myclass2', mock_date], '<p class="myclass myclass2" id="myid">' + mock_date.toString() + '</p>');
      })();
      it_renders('selector:String, children:String[]', ['p#myid.myclass.myclass2', ['one', 'two', 'three']], '<p class="myclass myclass2" id="myid">onetwothree</p>');
      it_renders('selector:String, children:String...', ['p#myid.myclass.myclass2', 'one', 'two', 'three'], '<p class="myclass myclass2" id="myid">onetwothree</p>');
      it_renders('selector:String, children...:[DOM Nodes, String, Number, Array, jQuery]', ['p#myid.myclass.myclass2', [node('span'), 'hello', [node('table'), 'world', 5, [node('div')]], 0, node('a'), $('<span class="result"></span><span class="jQueryObjDeux"></span>')]], '<p class="myclass myclass2" id="myid"><span></span>hello<table></table>world5<div></div>0<a></a><span class="result"></span><span class="jQueryObjDeux"></span></p>');
      it_renders('selector:String, children...:[undefined, null]', ['p#myid.myclass.myclass2', [void 0, null]], '<p class="myclass myclass2" id="myid"></p>');
      it_renders("selector:String, attrHash:Object", [
        'p#myid.myclass.myclass2', {
          "class": 'myclass3',
          'data-custom': 'myattr',
          'data-custom2': 'myattr2'
        }
      ], '<p class="myclass3" data-custom="myattr" data-custom2="myattr2" id="myid"></p>');
      it_renders("selector:String, attrHash:Object, children...:[DOM Nodes, String, Number, Array, jQuery]", [
        'p', {
          'data-custom': 'myattr',
          'data-custom2': 'myattr2'
        }, node('span'), 'hello', [node('table'), 'world', 5, [node('div')]], 0, node('a')
      ], '<p data-custom="myattr" data-custom2="myattr2"><span></span>hello<table></table>world5<div></div>0<a></a></p>');
      it_renders('selector:String, children...:[undefined, null]', [
        'p', {
          'data-custom': 'myattr',
          'data-custom2': 'myattr2'
        }, void 0, null
      ], '<p data-custom="myattr" data-custom2="myattr2"></p>');
      it_renders_views("view:Backbone.View", [], '<div cell="TestCell1" class="TestCell1">TestCell1 Contents</div>');
      return it_renders_views("view:Backbone.View, options:Object", [
        {
          tagName: 'span'
        }
      ], '<span cell="TestCell1" class="TestCell1">TestCell1 Contents</span>');
    });
  };
});
