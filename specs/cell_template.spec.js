// Generated by CoffeeScript 1.4.0
var __slice = [].slice;

define(['./spec-utils'], function(_arg) {
  var node, nodeHTMLEquals, stringify, verify_is_jQueryish;
  nodeHTMLEquals = _arg.nodeHTMLEquals, stringify = _arg.stringify, node = _arg.node;
  verify_is_jQueryish = function(obj) {
    return expect(Object.getPrototypeOf(obj)).toBe($.fn);
  };
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    describe('__.$()', function() {
      beforeEachRequire(['__'], function(__) {
        return this.result = __.$('p#myid.myclass.myclass2');
      });
      it('returns a jQuery-ish object', function() {
        return verify_is_jQueryish(this.result);
      });
      return it('jQuery-ish object wraps whatever is returned from __', function() {
        return nodeHTMLEquals(this.result[0], '<p class="myclass myclass2" id="myid"></p>');
      });
    });
    describe('Reference integration', function() {
      beforeEachRequire(['__', 'ref'], function(__, ref) {
        this.__ = __;
        this.model = new Backbone.Model().set({
          a: 'a val',
          b: 'b val',
          c: 'c val'
        });
        this.ref_a = this.model.ref('a');
        this.ref_b = this.model.ref('b');
        return this.ref_a_b = this.ref_a.combine(this.ref_b);
      });
      describe('when a Reference is passed as an attribute value', function() {
        beforeEach(function() {
          return this.node = this.__('.bound', {
            'data-custom': this.ref_a
          });
        });
        it("sets initial value of References's value to the element's attribute", function() {
          return expect(this.node.getAttribute('data-custom')).toBe('a val');
        });
        return describe("when the Reference's value changes", function() {
          beforeEach(function() {
            return this.model.set({
              a: 'a val 2'
            });
          });
          return it("automatically sets value of the Reference to the element's attribute", function() {
            var done,
              _this = this;
            done = false;
            runs(function() {
              return setTimeout((function() {
                return done = true;
              }), 10);
            });
            waitsFor(function() {
              return done;
            });
            return runs(function() {
              return expect(_this.node.getAttribute('data-custom')).toBe("a val 2");
            });
          });
        });
      });
      return describe('when a Reference is passed as a child', function() {
        beforeEach(function() {
          return this.node = this.__('.bound', this.ref_a);
        });
        it("sets initial value of References's value to the element's attribute", function() {
          return expect(this.node.innerHTML).toBe('a val');
        });
        return describe("when the Reference's value changes", function() {
          beforeEach(function() {
            return this.model.set({
              a: 'a val 2'
            });
          });
          return it("automatically sets value of the Reference to the element's attribute", function() {
            var done,
              _this = this;
            done = false;
            runs(function() {
              return setTimeout((function() {
                return done = true;
              }), 10);
            });
            waitsFor(function() {
              return done;
            });
            return runs(function() {
              return expect(_this.node.innerHTML).toBe("a val 2");
            });
          });
        });
      });
    });
    describe('Cell.prototype.render is modified', function() {
      beforeEachRequire(['cell', '__'], function(_arg2, __) {
        var C, Cell;
        Cell = _arg2.Cell;
        this.__ = __;
        this.cdef = {
          renderEl: function(__, bindTo) {}
        };
        spyOn(this.cdef, 'renderEl').andCallThrough();
        C = Cell.extend(this.cdef);
        return new C().render();
      });
      return it('calls Cell.renderEl(__,__.bindTo)', function() {
        return expect(this.cdef.renderEl).toHaveBeenCalledWith(this.__, this.__.bindTo);
      });
    });
    return describe('__( viewOrSelector:[Backbone.View, String], attrHash_or_options?:Object, children:[DOMNode, String, Number, Array, jQuery] )', function() {
      var empty, invalid, it_renders, it_renders_views, _fn, _fn1, _i, _j, _len, _len1, _ref, _ref1;
      beforeEachRequire(["fixtures/TestCell1", '__'], function(TestCell1, __) {
        this.TestCell1 = TestCell1;
        this.__ = __;
      });
      _ref = [(function() {})];
      _fn = function(invalid) {
        var invalid_str;
        invalid_str = "" + (invalid === '' && '""' || invalid);
        return describe("__( " + invalid_str + " )", function() {
          return it("__( " + invalid_str + " ) === undefined", function() {
            var _this = this;
            return expect(function() {
              return _this.__(invalid);
            }).toThrow();
          });
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        invalid = _ref[_i];
        _fn(invalid);
      }
      _ref1 = ['', void 0, null];
      _fn1 = function(empty) {
        var empty_str;
        empty_str = "" + (empty === '' && '""' || empty);
        return describe("__( " + empty_str + " )", function() {
          return it("__( " + empty_str + " ) === undefined", function() {
            return expect(this.__(empty)).toBe(void 0);
          });
        });
      };
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        empty = _ref1[_j];
        _fn1(empty);
      }
      it_renders = function(desc, input_args, expected_html_output, debug) {
        return describe("__( " + desc + " )", function() {
          var input_strings;
          input_strings = stringify(input_args, true);
          return it("__( " + input_strings + " ) === " + expected_html_output, function() {
            if (debug) {
              debugger;
            }
            return nodeHTMLEquals(this.__.apply(this, input_args), expected_html_output);
          });
        });
      };
      it_renders_views = function(desc, input_args, expected_html_output, debug) {
        return describe("__( " + desc + " )", function() {
          var input_strings;
          input_strings = stringify(input_args, true);
          return it("__( Backbone.View, " + input_strings + " ) === " + expected_html_output, function() {
            if (debug) {
              debugger;
            }
            return nodeHTMLEquals(this.__.apply(this, [this.TestCell1].concat(__slice.call(input_args))), expected_html_output);
          });
        });
      };
      it_renders('selector:String(tag, id, multiple classes)', ['p#myid.myclass.myclass2'], '<p class="myclass myclass2" id="myid"></p>');
      it_renders('selector:String, child:String', ['p#myid.myclass.myclass2', 'blargo'], '<p class="myclass myclass2" id="myid">blargo</p>');
      it_renders("selector:String, child:String('<')", ['p#myid.myclass.myclass2', '<'], '<p class="myclass myclass2" id="myid"><</p>');
      it_renders('selector:String, child:Number', ['p#myid.myclass.myclass2', 777], '<p class="myclass myclass2" id="myid">777</p>');
      it_renders('selector:String, child:Number(0)', ['p#myid.myclass.myclass2', 0], '<p class="myclass myclass2" id="myid">0</p>');
      it_renders('selector:String, child:DOMNode', ['p#myid.myclass.myclass2', node('span')], '<p class="myclass myclass2" id="myid"><span></span></p>');
      it_renders('selector:String, child:jQuery', ['p#myid.myclass.myclass2', $('<span></span>')], '<p class="myclass myclass2" id="myid"><span></span></p>');
      it_renders('selector:String, child:jQuery', ['p#myid.myclass.myclass2', $('<span></span>')], '<p class="myclass myclass2" id="myid"><span></span></p>');
      (function() {
        var mock_date;
        mock_date = new Date();
        return it_renders('selector:String, child:Date', ['p#myid.myclass.myclass2', mock_date], '<p class="myclass myclass2" id="myid">' + mock_date.toString() + '</p>');
      })();
      it_renders('selector:String, children:String[]', ['p#myid.myclass.myclass2', ['one', 'two', 'three']], '<p class="myclass myclass2" id="myid">onetwothree</p>');
      it_renders('selector:String, children:String...', ['p#myid.myclass.myclass2', 'one', 'two', 'three'], '<p class="myclass myclass2" id="myid">onetwothree</p>');
      it_renders('selector:String, children...:[DOM Nodes, String, Number, Array, jQuery]', ['p#myid.myclass.myclass2', [node('span'), 'hello', [node('table'), 'world', 5, [node('div')]], 0, node('a'), $('<span class="result"></span><span class="jQueryObjDeux"></span>')]], '<p class="myclass myclass2" id="myid"><span></span>hello<table></table>world5<div></div>0<a></a><span class="result"></span><span class="jQueryObjDeux"></span></p>');
      it_renders('selector:String, children...:[undefined, null]', ['p#myid.myclass.myclass2', [void 0, null]], '<p class="myclass myclass2" id="myid"></p>');
      it_renders("selector:String, attrHash:Object", [
        'p#myid.myclass.myclass2', {
          "class": 'myclass3',
          'data-custom': 'myattr',
          'data-custom2': 'myattr2'
        }
      ], '<p class="myclass3" data-custom="myattr" data-custom2="myattr2" id="myid"></p>');
      it_renders("selector:String, attrHash:Object, children...:[DOM Nodes, String, Number, Array, jQuery]", [
        'p', {
          'data-custom': 'myattr',
          'data-custom2': 'myattr2'
        }, node('span'), 'hello', [node('table'), 'world', 5, [node('div')]], 0, node('a')
      ], '<p data-custom="myattr" data-custom2="myattr2"><span></span>hello<table></table>world5<div></div>0<a></a></p>');
      it_renders('selector:String, children...:[undefined, null]', [
        'p', {
          'data-custom': 'myattr',
          'data-custom2': 'myattr2'
        }, void 0, null
      ], '<p data-custom="myattr" data-custom2="myattr2"></p>');
      it_renders_views("view:Backbone.View", [], '<div cell="TestCell1" class="TestCell1">TestCell1 Contents</div>');
      return it_renders_views("view:Backbone.View, options:Object", [
        {
          tagName: 'span'
        }
      ], '<span cell="TestCell1" class="TestCell1">TestCell1 Contents</span>');
    });
  };
});
