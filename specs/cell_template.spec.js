// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  define(['./spec-utils'], function(_arg) {
    var node, nodeHTMLEquals, stringify, verify_is_jQueryish;
    nodeHTMLEquals = _arg.nodeHTMLEquals, stringify = _arg.stringify, node = _arg.node;
    verify_is_jQueryish = function(obj) {
      return expect(Object.getPrototypeOf(obj)).toBe($.fn);
    };
    return function(_arg1) {
      var beforeEachRequire;
      beforeEachRequire = _arg1.beforeEachRequire;
      describe('__.$()', function() {
        beforeEachRequire(['__'], function(__) {
          return this.result = __.$('p#myid.myclass.myclass2');
        });
        it('returns a jQuery-ish object', function() {
          return verify_is_jQueryish(this.result);
        });
        return it('jQuery-ish object wraps whatever is returned from __', function() {
          return nodeHTMLEquals(this.result[0], '<p class="myclass myclass2" id="myid"></p>');
        });
      });
      describe('__.bind(backbone_model, attrs, transform)', function() {
        return describe('when passed as a Child for __()', function() {
          describe("when attrs is an Array (multiple attribute names)", function() {
            beforeEachRequire(['__'], function(__) {
              this.model = new Backbone.Model().set({
                attr1: 'initial value1',
                attr2: 'initial value2'
              });
              return this.node = __('.bound', __.bind(this.model, ['attr1', 'attr2'], function(attr1, attr2, model) {
                return "attr1: " + attr1 + ", attr2: " + attr2;
              }));
            });
            it("sets initial value of backbone_model's attribute (attrs) to innerHTML", function() {
              return expect(this.node.innerHTML).toBe("attr1: initial value1, attr2: initial value2");
            });
            return describe("backbone_model either attribute changes", function() {
              beforeEach(function() {
                return this.model.set({
                  attr1: 'new1',
                  attr2: 'new2'
                });
              });
              return it("automatically sets value of the backbone_model's attribute (attrs) to innerHTML", function() {
                return expect(this.node.innerHTML).toBe("attr1: new1, attr2: new2");
              });
            });
          });
          return describe("when attrs is a string (one attribute's name)", function() {
            describe("automatically transforms undefined into ''", function() {
              beforeEachRequire(['__'], function(__) {
                this.model = new Backbone.Model();
                return this.node = __('.bound', __.bind(this.model, 'attr'));
              });
              return it("sets initial value of backbone_model's attribute (attrs) to innerHTML", function() {
                return expect(this.node.innerHTML).toBe("");
              });
            });
            describe("and transform is a function, automatically transforms undefined into ''", function() {
              beforeEachRequire(['__'], function(__) {
                this.model = new Backbone.Model();
                return this.node = __('.bound', __.bind(this.model, 'attr', function() {}));
              });
              return it("sets initial value of backbone_model's attribute (attrs) to innerHTML", function() {
                return expect(this.node.innerHTML).toBe("");
              });
            });
            describe("and transform is a function", function() {
              beforeEachRequire(['__'], function(__) {
                this.model = new Backbone.Model().set({
                  attr: 'initial value'
                });
                return this.node = __('.bound', __.bind(this.model, 'attr'));
              });
              it("sets initial value of backbone_model's attribute (attrs) to innerHTML", function() {
                return expect(this.node.innerHTML).toBe("initial value");
              });
              return describe("backbone_model attribute (attrs) changes", function() {
                beforeEach(function() {
                  return this.model.set('attr', 'new value');
                });
                return it("automatically sets value of the backbone_model's attribute (attrs) to innerHTML", function() {
                  return expect(this.node.innerHTML).toBe("new value");
                });
              });
            });
            return describe("and transform is undefined", function() {
              beforeEachRequire(['__'], function(__) {
                this.model = new Backbone.Model().set({
                  attr: 'initial value'
                });
                return this.node = __('.bound', __.bind(this.model, 'attr', function(attr, model) {
                  return "attr: " + attr;
                }));
              });
              it("sets initial value of backbone_model's attribute (attrs) to innerHTML", function() {
                return expect(this.node.innerHTML).toBe("attr: initial value");
              });
              return describe("backbone_model attribute (attrs) changes", function() {
                beforeEach(function() {
                  return this.model.set('attr', 'new value');
                });
                return it("automatically sets value of the backbone_model's attribute (attrs) to innerHTML", function() {
                  return expect(this.node.innerHTML).toBe("attr: new value");
                });
              });
            });
          });
        });
      });
      describe('Cell.prototype.render is modified', function() {
        beforeEachRequire(['cell', '__'], function(_arg2, __) {
          var C, Cell;
          Cell = _arg2.Cell;
          this.__ = __;
          this.cdef = {
            render_el: function(__, bind) {}
          };
          spyOn(this.cdef, 'render_el').andCallThrough();
          C = Cell.extend(this.cdef);
          return new C().render();
        });
        return it('calls Cell.render_el(__,__.bind)', function() {
          return expect(this.cdef.render_el).toHaveBeenCalledWith(this.__, this.__.bind);
        });
      });
      return describe('__()', function() {
        var empty, invalid, it_renders, it_renders_cell, _fn, _fn1, _i, _j, _len, _len1, _ref, _ref1;
        beforeEachRequire(["cell!fixtures/TestCell1", '__'], function(TestCell1, __) {
          this.TestCell1 = TestCell1;
          this.__ = __;
        });
        _ref = [(function() {})];
        _fn = function(invalid) {
          var invalid_str;
          invalid_str = "" + (invalid === '' && '""' || invalid);
          return describe(invalid_str, function() {
            return it("__ " + invalid_str + " === undefined", function() {
              var _this = this;
              return expect(function() {
                return _this.__(invalid);
              }).toThrow();
            });
          });
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          invalid = _ref[_i];
          _fn(invalid);
        }
        _ref1 = ['', void 0, null];
        _fn1 = function(empty) {
          var empty_str;
          empty_str = "" + (empty === '' && '""' || empty);
          return describe(empty_str, function() {
            return it("__ " + empty_str + " === undefined", function() {
              return expect(this.__(empty)).toBe(void 0);
            });
          });
        };
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          empty = _ref1[_j];
          _fn1(empty);
        }
        it_renders = function(desc, input_args, expected_html_output, debug) {
          return describe(desc, function() {
            var input_strings;
            input_strings = stringify(input_args, true);
            return it("__ " + input_strings + " === " + expected_html_output, function() {
              if (debug) {
                debugger;
              }
              return nodeHTMLEquals(this.__.apply(this, input_args), expected_html_output);
            });
          });
        };
        it_renders_cell = function(desc, input_args, expected_html_output, debug) {
          return describe(desc, function() {
            var input_strings;
            input_strings = stringify(input_args, true);
            return it("__ Cell, " + input_strings + " === " + expected_html_output, function() {
              if (debug) {
                debugger;
              }
              return nodeHTMLEquals(this.__.apply(this, [this.TestCell1].concat(__slice.call(input_args))), expected_html_output);
            });
          });
        };
        it_renders('Selector:<String> (tag, id, multiple classes)', ['p#myid.myclass.myclass2'], '<p class="myclass myclass2" id="myid"></p>');
        it_renders('Selector:<String>, Child:<String>', ['p#myid.myclass.myclass2', 'blargo'], '<p class="myclass myclass2" id="myid">blargo</p>');
        it_renders('Selector:<String>, Child:<String> # Zepto regression', ['p#myid.myclass.myclass2', '<'], '<p class="myclass myclass2" id="myid"><</p>');
        it_renders('Selector:<String>, Child:<Number>', ['p#myid.myclass.myclass2', 777], '<p class="myclass myclass2" id="myid">777</p>');
        it_renders('Selector:<String>, Child:<Number === 0>', ['p#myid.myclass.myclass2', 0], '<p class="myclass myclass2" id="myid">0</p>');
        it_renders('Selector:<String>, Child:<DOM Node>', ['p#myid.myclass.myclass2', node('span')], '<p class="myclass myclass2" id="myid"><span></span></p>');
        it_renders('Selector:<String>, Child:<jQuery-ish object>', ['p#myid.myclass.myclass2', $('<span></span>')], '<p class="myclass myclass2" id="myid"><span></span></p>');
        (function() {
          var mock_date;
          mock_date = new Date();
          return it_renders('Selector:<String>, Child:<Date> # REGRESSION', ['p#myid.myclass.myclass2', mock_date], '<p class="myclass myclass2" id="myid">' + mock_date.toString() + '</p>');
        })();
        it_renders('Selector:<String>, Children:<Array of Strings>', ['p#myid.myclass.myclass2', ['one', 'two']], '<p class="myclass myclass2" id="myid">onetwo</p>');
        it_renders('Selector:<String>, Children...:<DOM Nodes, String, Number, Array, jQuery-ish object>', ['p#myid.myclass.myclass2', [node('span'), 'hello', [node('table'), 'world', 5, [node('div')]], 0, node('a'), $('<span class="result"></span><span class="jQueryObjDeux"></span>')]], '<p class="myclass myclass2" id="myid"><span></span>hello<table></table>world5<div></div>0<a></a><span class="result"></span><span class="jQueryObjDeux"></span></p>');
        it_renders('Selector:<String>, Children...:<undefined, null>', ['p#myid.myclass.myclass2', [void 0, null]], '<p class="myclass myclass2" id="myid"></p>');
        it_renders("Selector:<String>, Attribute Map:<Object>", [
          'p#myid.myclass.myclass2', {
            "class": 'myclass3',
            'data-custom': 'myattr',
            'data-custom2': 'myattr2'
          }
        ], '<p class="myclass3 myclass myclass2" data-custom="myattr" data-custom2="myattr2" id="myid"></p>');
        it_renders("Selector:<String>, Attribute Map:<Object>, Children...:<DOM Nodes, String, Number, Array, jQuery-ish object>", [
          'p', {
            'data-custom': 'myattr',
            'data-custom2': 'myattr2'
          }, node('span'), 'hello', [node('table'), 'world', 5, [node('div')]], 0, node('a')
        ], '<p data-custom="myattr" data-custom2="myattr2"><span></span>hello<table></table>world5<div></div>0<a></a></p>');
        it_renders('Selector:<String>, Children...:<undefined, null>', [
          'p', {
            'data-custom': 'myattr',
            'data-custom2': 'myattr2'
          }, void 0, null
        ], '<p data-custom="myattr" data-custom2="myattr2"></p>');
        it_renders_cell("cell:<cell>", [], '<div class="TestCell1">TestCell1 Contents</div>');
        it_renders_cell("cell:<cell>, options:<Object>", [
          {
            tagName: 'span'
          }
        ], '<span class="TestCell1">TestCell1 Contents</span>');
        it_renders_cell("cell:<cell>, Selector String:<String>", ['#myid.myclass.myclass2'], '<div class="TestCell1 myclass myclass2" id="myid">TestCell1 Contents</div>');
        return it_renders_cell("cell:<cell>, Selector String:<String>, options:<Object>", [
          '#myid.myclass.myclass2', {
            tagName: 'a'
          }
        ], '<a class="TestCell1 myclass myclass2" id="myid">TestCell1 Contents</a>');
      });
    };
  });

}).call(this);
