// Generated by CoffeeScript 1.4.0

define(['./spec-utils'], function(_arg) {
  var node, nodeHTMLEquals, stringify;
  nodeHTMLEquals = _arg.nodeHTMLEquals, stringify = _arg.stringify, node = _arg.node;
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['ref', 'backbone'], function(ref, Backbone) {
      this.ref = ref;
      this.Backbone = Backbone;
      this.model = new this.Backbone.Model({
        a: 7,
        b: 17,
        c: 27
      });
      this.transform = jasmine.createSpy('transform').andCallFake(function() {
        return 8;
      });
      return this.context = {};
    });
    describe('Backbone.Model', function() {
      return describe('@ref(attrs:{string | string[]}, transform?:function( attr_vals:{string | string[]} ), context?:object )', function() {
        it('@ref( {undefined | function | number | object} ) returns undefined', function() {
          expect(this.model.ref()).toBeUndefined();
          expect(this.model.ref(void 0)).toBeUndefined();
          expect(this.model.ref(null)).toBeUndefined();
          expect(this.model.ref(function() {})).toBeUndefined();
          expect(this.model.ref(5)).toBeUndefined();
          return expect(this.model.ref({})).toBeUndefined();
        });
        describe("@ref( string )", function() {
          beforeEach(function() {
            return this.reference = this.model.ref('a');
          });
          return it('returns a Reference', function() {
            expect(this.reference instanceof this.ref.Reference).toBe(true);
            return expect(this.reference.value()).toBe(7);
          });
        });
        describe("@ref( string, transform )", function() {
          beforeEach(function() {
            this.reference = this.model.ref('a', this.transform);
            return this.value = this.reference.value();
          });
          return it('calls transform and returns reference when value() is called', function() {
            expect(this.reference instanceof this.ref.Reference).toBe(true);
            expect(this.transform).toHaveBeenCalledWith(7);
            expect(this.transform.callCount).toBe(1);
            return expect(this.value).toBe(8);
          });
        });
        describe('@ref( string, transform, context )', function() {
          beforeEach(function() {
            this.reference = this.model.ref('a', this.transform, this.context);
            return this.value = this.reference.value();
          });
          return it('calls transform (with this set to context) and returns reference when value() is called', function() {
            expect(this.reference instanceof this.ref.Reference).toBe(true);
            expect(this.transform.callCount).toBe(1);
            expect(this.transform).toHaveBeenCalledWith(7);
            expect(this.transform.calls[0].object).toBe(this.context);
            return expect(this.value).toBe(8);
          });
        });
        describe('@ref( string[] )', function() {
          beforeEach(function() {
            this.reference = this.model.ref(['a', 'b']);
            return this.value = this.reference.value();
          });
          it('calls transform (with this set to context) and returns reference when value() is called', function() {
            expect(this.reference instanceof this.ref.Reference).toBe(true);
            return expect(this.value).toEqual(7);
          });
          return describe('when multiple model attributes change', function() {
            beforeEach(function() {
              this.reference.on('change', this.onChange = jasmine.createSpy('change'));
              return this.model.set({
                a: 9,
                b: 19
              });
            });
            return it("'change' listeners are called once", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                expect(_this.onChange.callCount).toBe(1);
                return expect(_this.onChange).toHaveBeenCalledWith(_this.reference, 9);
              });
            });
          });
        });
        describe('@ref( string[], transform )', function() {
          beforeEach(function() {
            this.reference = this.model.ref(['a', 'b'], this.transform);
            return this.value = this.reference.value();
          });
          it('calls transform and returns reference when value() is called', function() {
            expect(this.reference instanceof this.ref.Reference).toBe(true);
            expect(this.transform.callCount).toBe(1);
            expect(this.transform).toHaveBeenCalledWith(7, 17);
            return expect(this.value).toEqual(8);
          });
          return describe('when multiple model attributes change', function() {
            beforeEach(function() {
              this.transform.reset();
              this.reference.on('change', this.onChange = jasmine.createSpy('change'));
              return this.model.set({
                a: 9,
                b: 19
              });
            });
            it("'change' listeners are called once with the value of the reference", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                expect(_this.onChange.callCount).toBe(1);
                return expect(_this.onChange).toHaveBeenCalledWith(_this.reference, 8);
              });
            });
            return it("calls transform with changed model attribute values", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                return expect(_this.transform).toHaveBeenCalledWith(9, 19);
              });
            });
          });
        });
        return describe('@ref( string[], transform, context )', function() {
          beforeEach(function() {
            this.reference = this.model.ref(['a', 'b'], this.transform, this.context);
            return this.value = this.reference.value();
          });
          it('calls transform (with this set to context) and returns reference when value() is called', function() {
            expect(this.reference instanceof this.ref.Reference).toBe(true);
            expect(this.transform.callCount).toBe(1);
            expect(this.transform).toHaveBeenCalledWith(7, 17);
            expect(this.transform.calls[0].object).toBe(this.context);
            return expect(this.value).toEqual(8);
          });
          return describe('when multiple model attributes change', function() {
            beforeEach(function() {
              this.transform.reset();
              this.reference.on('change', this.onChange = jasmine.createSpy('change'));
              return this.model.set({
                a: 9,
                b: 19
              });
            });
            it("'change' listeners are called once with the value of the reference", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                expect(_this.onChange.callCount).toBe(1);
                return expect(_this.onChange).toHaveBeenCalledWith(_this.reference, 8);
              });
            });
            return it("calls transform with changed model attribute values", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                expect(_this.transform).toHaveBeenCalledWith(9, 19);
                return expect(_this.transform.calls[0].object).toBe(_this.context);
              });
            });
          });
        });
      });
    });
    return describe('Reference', function() {
      beforeEach(function() {
        return this.reference = this.model.ref('a');
      });
      describe('@ref( transform?:function( attr_vals:{string | string[]} ) )', function() {
        it('@ref() returns this (original reference)', function() {
          expect(this.reference.ref()).toBe(this.reference);
          expect(this.reference.ref(void 0)).toBe(this.reference);
          return expect(this.reference.ref(null)).toBe(this.reference);
        });
        return describe('@ref( function ) returns this (original reference)', function() {
          beforeEach(function() {
            return this.new_reference = this.reference.ref(this.transform);
          });
          return describe('when @value() is called', function() {
            beforeEach(function() {
              return this.value = this.new_reference.value();
            });
            return it('calls transform and returns result from transform', function() {
              expect(this.transform).toHaveBeenCalledWith(7);
              return expect(this.value).toBe(8);
            });
          });
        });
      });
      describe('@combine( ref:{Reference | Reference[]}, transform?:function( attr_vals:{string | string[]} ), context?:object )', function() {
        beforeEach(function() {
          this.reference_a = this.model.ref('a');
          this.reference_b = this.model.ref('b');
          return this.reference_c = this.model.ref('c');
        });
        it('@combine( {NOT a Reference or Array} ) returns this (original reference)', function() {
          expect(this.reference_a.combine()).toBe(this.reference_a);
          expect(this.reference_a.combine(void 0)).toBe(this.reference_a);
          expect(this.reference_a.combine(null)).toBe(this.reference_a);
          expect(this.reference_a.combine(function() {})).toBe(this.reference_a);
          expect(this.reference_a.combine(5)).toBe(this.reference_a);
          return expect(this.reference_a.combine({})).toBe(this.reference_a);
        });
        describe("@combine( Reference )", function() {
          beforeEach(function() {
            return this.combine_reference = this.reference_a.combine(this.reference_b);
          });
          it('returns a Reference', function() {
            return expect(this.combine_reference instanceof this.ref.Reference).toBe(true);
          });
          return describe('when value() is called', function() {
            beforeEach(function() {
              return this.value = this.combine_reference.value();
            });
            return it('calls default transform and returns result (first reference value)', function() {
              return expect(this.value).toBe(7);
            });
          });
        });
        describe("@combine( Reference, transform )", function() {
          beforeEach(function() {
            return this.combine_reference = this.reference_a.combine(this.reference_b, this.transform);
          });
          it('returns a Reference', function() {
            return expect(this.combine_reference instanceof this.ref.Reference).toBe(true);
          });
          return describe('when value() is called', function() {
            beforeEach(function() {
              return this.value = this.combine_reference.value();
            });
            return it('calls transform and returns result (first reference value)', function() {
              expect(this.transform).toHaveBeenCalledWith(7, 17);
              return expect(this.value).toBe(8);
            });
          });
        });
        describe("@combine( Reference, transform, context )", function() {
          beforeEach(function() {
            return this.combine_reference = this.reference_a.combine(this.reference_b, this.transform, this.context);
          });
          it('returns a Reference', function() {
            return expect(this.combine_reference instanceof this.ref.Reference).toBe(true);
          });
          return describe('when value() is called', function() {
            beforeEach(function() {
              return this.value = this.combine_reference.value();
            });
            return it('calls transform (with this set to context) and returns result', function() {
              expect(this.transform).toHaveBeenCalledWith(7, 17);
              expect(this.value).toBe(8);
              return expect(this.transform.calls[0].object).toBe(this.context);
            });
          });
        });
        describe("@combine( Reference[] )", function() {
          beforeEach(function() {
            return this.combine_reference = this.reference_a.combine([this.reference_b, this.reference_c]);
          });
          it('returns a Reference', function() {
            return expect(this.combine_reference instanceof this.ref.Reference).toBe(true);
          });
          describe('when value() is called', function() {
            beforeEach(function() {
              return this.value = this.combine_reference.value();
            });
            return it('calls transform and returns result', function() {
              return expect(this.value).toBe(7);
            });
          });
          return describe('when multiple model attributes change', function() {
            beforeEach(function() {
              this.combine_reference.on('change', this.onChange = jasmine.createSpy('change'));
              return this.model.set({
                a: 9,
                b: 19,
                c: 29
              });
            });
            return it("'change' listeners are called once with the value of the reference", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                expect(_this.onChange.callCount).toBe(1);
                return expect(_this.onChange).toHaveBeenCalledWith(_this.combine_reference, 9);
              });
            });
          });
        });
        describe("@combine( Reference[], transform )", function() {
          beforeEach(function() {
            return this.combine_reference = this.reference_a.combine([this.reference_b, this.reference_c], this.transform);
          });
          it('returns a Reference', function() {
            return expect(this.combine_reference instanceof this.ref.Reference).toBe(true);
          });
          describe('when value() is called', function() {
            beforeEach(function() {
              return this.value = this.combine_reference.value();
            });
            return it('calls transform and returns result', function() {
              expect(this.transform).toHaveBeenCalledWith(7, 17, 27);
              return expect(this.value).toBe(8);
            });
          });
          return describe('when multiple model attributes change', function() {
            beforeEach(function() {
              this.transform.reset();
              this.combine_reference.on('change', this.onChange = jasmine.createSpy('change'));
              return this.model.set({
                a: 9,
                b: 19,
                c: 29
              });
            });
            it("'change' listeners are called once with the value of the reference", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                expect(_this.onChange.callCount).toBe(1);
                return expect(_this.onChange).toHaveBeenCalledWith(_this.combine_reference, 8);
              });
            });
            return it("calls transform with changed model attribute values", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                return expect(_this.transform).toHaveBeenCalledWith(9, 19, 29);
              });
            });
          });
        });
        return describe("@ref( Reference[], transform, context )", function() {
          beforeEach(function() {
            return this.combine_reference = this.reference_a.combine([this.reference_b, this.reference_c], this.transform, this.context);
          });
          it('returns a Reference', function() {
            return expect(this.combine_reference instanceof this.ref.Reference).toBe(true);
          });
          describe('when value() is called', function() {
            beforeEach(function() {
              return this.value = this.combine_reference.value();
            });
            return it('calls transform (with this set to context) and returns result', function() {
              expect(this.transform).toHaveBeenCalledWith(7, 17, 27);
              expect(this.value).toBe(8);
              return expect(this.transform.calls[0].object).toBe(this.context);
            });
          });
          return describe('when multiple model attributes change', function() {
            beforeEach(function() {
              this.transform.reset();
              this.combine_reference.on('change', this.onChange = jasmine.createSpy('change'));
              return this.model.set({
                a: 9,
                b: 19,
                c: 29
              });
            });
            it("'change' listeners are called once with the value of the reference", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                expect(_this.onChange.callCount).toBe(1);
                return expect(_this.onChange).toHaveBeenCalledWith(_this.combine_reference, 8);
              });
            });
            return it("calls transform with changed model attribute values", function() {
              var stop,
                _this = this;
              stop = false;
              setTimeout((function() {
                return stop = true;
              }), 0);
              waitsFor(function() {
                return stop;
              });
              return runs(function() {
                expect(_this.transform).toHaveBeenCalledWith(9, 19, 29);
                return expect(_this.transform.calls[0].object).toBe(_this.context);
              });
            });
          });
        });
      });
      return describe('@onChangeAndDo( handler:function, context?:object )', function() {
        return describe('@onChangeAndDo( handler:function )', function() {
          beforeEach(function() {
            return this.reference.onChangeAndDo(this.onChange = jasmine.createSpy('onChangeAndDo'));
          });
          it('immediately calls handler', function() {
            expect(this.onChange.callCount).toBe(1);
            return expect(this.onChange).toHaveBeenCalledWith(this.reference, 7);
          });
          return describe('when the Reference value changes', function() {
            beforeEach(function() {
              this.onChange.reset();
              return this.model.set({
                a: 8
              });
            });
            return it('calls handler', function() {
              var done,
                _this = this;
              done = false;
              runs(function() {
                return setTimeout((function() {
                  return done = true;
                }), 10);
              });
              waitsFor(function() {
                return done;
              });
              return runs(function() {
                expect(_this.onChange.callCount).toBe(1);
                return expect(_this.onChange).toHaveBeenCalledWith(_this.reference, 8);
              });
            });
          });
        });
      });
    });
  };
});
