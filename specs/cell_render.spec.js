// Generated by CoffeeScript 1.3.1
(function() {

  define(['./spec-utils'], function(_arg) {
    var NODE, nodeHTMLEquals, nodeToHTML;
    nodeHTMLEquals = _arg.nodeHTMLEquals, nodeToHTML = _arg.nodeToHTML;
    NODE = function(tag) {
      return document.createElement(tag);
    };
    return function(_arg1) {
      var beforeEachRequire;
      beforeEachRequire = _arg1.beforeEachRequire;
      beforeEachRequire(['cell!fixtures/TestCell1'], function(TestCell1) {
        this.TestCell1 = TestCell1;
        return this.testCell1 = new this.TestCell1;
      });
      describe('render_el', function() {
        var it_renders;
        it_renders = function(desc, render_el_return, expected_html_output) {
          return describe(desc, function() {
            return it("[" + (render_el_return.join(',')) + "] renders el === '" + expected_html_output + "'", function() {
              this.testCell1.render_el = function() {
                return render_el_return;
              };
              return nodeHTMLEquals(this.testCell1.render().el, expected_html_output);
            });
          });
        };
        it('no render_el', function() {
          return nodeHTMLEquals(this.testCell1.render().el, '<div class="TestCell1"></div>');
        });
        it('render_el is passed cell.__', function() {
          this.testCell1.render_el = sinon.stub();
          this.testCell1.render();
          return expect(this.testCell1.render_el.calledWithExactly(cell.prototype.__)).toBe(true);
        });
        return it_renders('Array of nodes', [NODE('a'), NODE('span'), NODE('input')], '<div class="TestCell1"><a></a><span></span><input></input></div>');
      });
      return describe('after_render', function() {
        it('called after render_el', function() {
          this.testCell1.render_el = sinon.stub();
          this.testCell1.after_render = sinon.stub();
          this.testCell1.render();
          return expect(this.testCell1.render_el.calledBefore(this.testCell1.after_render)).toBe(true);
        });
        return it('@el already created', function() {
          var el;
          this.testCell1.render_el = function() {
            return [NODE('a'), NODE('span'), NODE('input')];
          };
          el = void 0;
          this.testCell1.after_render = function() {
            return el = this.el;
          };
          this.testCell1.render();
          return nodeHTMLEquals(el, '<div class="TestCell1"><a></a><span></span><input></input></div>');
        });
      });
    };
  });

}).call(this);
