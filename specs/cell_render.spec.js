// Generated by CoffeeScript 1.3.1
(function() {

  define(['./spec-utils'], function(_arg) {
    var node, nodeHTMLEquals, stringify;
    nodeHTMLEquals = _arg.nodeHTMLEquals, stringify = _arg.stringify, node = _arg.node;
    return function(_arg1) {
      var beforeEachRequire;
      beforeEachRequire = _arg1.beforeEachRequire;
      beforeEachRequire(['cell!fixtures/TestCell1', 'cell'], function(TestCell1, cell) {
        this.TestCell1 = TestCell1;
        this.cell = cell;
        return this.testCell1 = new this.TestCell1;
      });
      describe('render_el', function() {
        var it_renders;
        it_renders = function(desc, render_el_return, expected_html_output) {
          return describe(desc, function() {
            var input_strings;
            input_strings = stringify(render_el_return, true);
            return it("[" + input_strings + "] === " + expected_html_output, function() {
              this.testCell1.render_el = function() {
                return render_el_return;
              };
              return nodeHTMLEquals(this.testCell1.render().el, expected_html_output);
            });
          });
        };
        it('no render_el', function() {
          return nodeHTMLEquals(this.testCell1.render().el, '<div class="TestCell1">TestCell1 Contents</div>');
        });
        it('render_el is passed cell.__', function() {
          this.testCell1.render_el = sinon.stub();
          this.testCell1.render();
          return expect(this.testCell1.render_el.calledWithExactly(this.cell.__)).toBe(true);
        });
        it_renders('Array of nodes', [node('a'), node('span'), node('input')], '<div class="TestCell1"><a></a><span></span><input></input></div>');
        return it_renders('Array of Nodes, Strings, Numbers, JQuery', [node('span'), 'hello', [node('table'), 'world', 5, [node('div')]], 0, node('a'), jQuery('<span class="jQueryObj"></span><span class="jQueryObjDeux"></span>')], '<div class="TestCell1"><span></span>hello<table></table>world5<div></div>0<a></a><span class="jQueryObj"></span><span class="jQueryObjDeux"></span></div>');
      });
      return describe('after_render', function() {
        it('called after render_el', function() {
          this.testCell1.render_el = sinon.stub();
          this.testCell1.after_render = sinon.stub();
          this.testCell1.render();
          return expect(this.testCell1.render_el.calledBefore(this.testCell1.after_render)).toBe(true);
        });
        return it('@el already created', function() {
          var el;
          this.testCell1.render_el = function() {
            return [node('a'), node('span'), node('input')];
          };
          el = void 0;
          this.testCell1.after_render = function() {
            return el = this.el;
          };
          this.testCell1.render();
          return nodeHTMLEquals(el, '<div class="TestCell1"><a></a><span></span><input></input></div>');
        });
      });
    };
  });

}).call(this);
