// Generated by CoffeeScript 1.6.2
var __slice = [].slice;

define(['spec-utils'], function(_arg) {
  var browserTrigger, node, nodeHTMLEquals, stringify;

  nodeHTMLEquals = _arg.nodeHTMLEquals, stringify = _arg.stringify, node = _arg.node, browserTrigger = _arg.browserTrigger;
  return function(_arg1) {
    var beforeEachRequire;

    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(["fixtures/TestCell1", 'cell/View', 'cell/Collection'], function(TestCell1, View, Collection) {
      this.TestCell1 = TestCell1;
      this.View = View;
      this.Collection = Collection;
      this.view = new this.View();
      return this._ = this.view._;
    });
    describe('_( viewOrSelector:[View, String], attrHash_or_options?:Object, children...:[DOMNode, String, Number, Array] )', function() {
      var empty, it_renders, it_renders_views, _fn, _i, _len, _ref;

      it_renders = function(desc, input_args, expected_html_output, debug) {
        return describe("_( " + desc + " )", function() {
          var input_strings;

          input_strings = stringify(input_args, true);
          return it("_( " + input_strings + " ) === " + expected_html_output, function() {
            if (debug) {
              debugger;
            }
            return nodeHTMLEquals(this._.apply(this, input_args), expected_html_output);
          });
        });
      };
      it_renders_views = function(desc, input_args, expected_html_output, debug) {
        return describe("_( " + desc + " )", function() {
          var input_strings;

          input_strings = stringify(input_args, true);
          return it("_( View, " + input_strings + " ) === " + expected_html_output, function() {
            if (debug) {
              debugger;
            }
            return nodeHTMLEquals(this._.apply(this, [this.TestCell1].concat(__slice.call(input_args))), expected_html_output);
          });
        });
      };
      describe("_( function )", function() {
        return it("_( function ) === undefined", function() {
          return expect(this._(function() {})).toBe(void 0);
        });
      });
      _ref = [void 0, null];
      _fn = function(empty) {
        var empty_str;

        empty_str = "" + (empty === '' && '""' || empty);
        return describe("_( " + empty_str + " )", function() {
          return it("_( " + empty_str + " ) === undefined", function() {
            return expect(this._(empty)).toBe(void 0);
          });
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        empty = _ref[_i];
        _fn(empty);
      }
      it_renders('empty string', [''], '<div></div>');
      it_renders('selector:String(tag, id, multiple classes)', ['p#myid.myclass.myclass2'], '<p class="myclass myclass2" id="myid"></p>');
      it_renders('selector:String, child:String', ['p#myid.myclass.myclass2', 'blargo'], '<p class="myclass myclass2" id="myid">blargo</p>');
      it_renders("selector:String, child:String('<')", ['p#myid.myclass.myclass2', '<'], '<p class="myclass myclass2" id="myid"><</p>');
      it_renders('selector:String, child:Number', ['p#myid.myclass.myclass2', 777], '<p class="myclass myclass2" id="myid">777</p>');
      it_renders('selector:String, child:Number(0)', ['p#myid.myclass.myclass2', 0], '<p class="myclass myclass2" id="myid">0</p>');
      it_renders('selector:String, child:DOMNode', ['p#myid.myclass.myclass2', node('span')], '<p class="myclass myclass2" id="myid"><span></span></p>');
      (function() {
        var mock_date;

        mock_date = new Date();
        return it_renders('selector:String, child:Date', ['p#myid.myclass.myclass2', mock_date], '<p class="myclass myclass2" id="myid">' + mock_date.toString() + '</p>');
      })();
      it_renders('selector:String, children:String[]', ['p#myid.myclass.myclass2', ['one', 'two', 'three']], '<p class="myclass myclass2" id="myid">onetwothree</p>');
      it_renders('selector:String, children:String...', ['p#myid.myclass.myclass2', 'one', 'two', 'three'], '<p class="myclass myclass2" id="myid">onetwothree</p>');
      it_renders('selector:String, children...:[DOM Nodes, String, Number, Array]', ['p#myid.myclass.myclass2', [node('span'), 'hello', [node('table'), 'world', 5, [node('div')]], 0, node('b')]], '<p class="myclass myclass2" id="myid"><span></span>hello<table></table>world5<div></div>0<b></b></p>');
      it_renders('selector:String, children...:[undefined, null]', ['p#myid.myclass.myclass2', [void 0, null]], '<p class="myclass myclass2" id="myid"></p>');
      it_renders('selector:String, undefined', ['p#myid.myclass.myclass2', void 0], '<p class="myclass myclass2" id="myid"></p>');
      it_renders("selector:String, attrHash:Object", [
        'p#myid.myclass.myclass2', {
          "class": 'myclass3',
          'data-custom': 'myattr',
          'data-custom2': 'myattr2'
        }
      ], '<p class="myclass myclass2 myclass3" data-custom="myattr" data-custom2="myattr2" id="myid"></p>');
      it_renders("selector:String, attrHash:Object (innerHTML as a property)", [
        'p#myid.myclass.myclass2', {
          "class": 'myclass3',
          'data-custom': 'myattr',
          innerHTML: '<b>wompa</b>'
        }
      ], '<p class="myclass myclass2 myclass3" data-custom="myattr" id="myid"><b>wompa</b></p>');
      it_renders("selector:String, attrHash:Object, children...:[DOM Nodes, String, Number, Array, jQuery]", [
        'p', {
          'data-custom': 'myattr',
          'data-custom2': 'myattr2'
        }, node('span'), 'hello', [node('table'), 'world', 5, [node('div')]], 0, node('b')
      ], '<p data-custom="myattr" data-custom2="myattr2"><span></span>hello<table></table>world5<div></div>0<b></b></p>');
      it_renders('selector:String, children...:[undefined, null]', [
        'p', {
          'data-custom': 'myattr',
          'data-custom2': 'myattr2'
        }, void 0, null
      ], '<p data-custom="myattr" data-custom2="myattr2"></p>');
      it_renders_views("view:View", [], '<div cell="TestCell1" class="TestCell1">TestCell1 Contents</div>');
      return describe("on* event handlers", function() {
        it('registers event handler when event is triggered on element', function() {
          this.node = this._('.bound', {
            onclick: this.clickHandler = jasmine.createSpy('click')
          });
          expect(this.clickHandler).not.toHaveBeenCalled();
          browserTrigger(this.node, 'click');
          expect(this.clickHandler).toHaveBeenCalled();
          return expect(this.clickHandler.calls[0].object).toBe(this.view);
        });
        return describe('registers View event handler', function() {
          beforeEach(function() {
            var CustomView, customView;

            customView = void 0;
            CustomView = this.View.extend({
              beforeRender: function() {
                return customView = this;
              }
            });
            this.node = this._(CustomView, {
              oncustom: this.customHandler = jasmine.createSpy('custom')
            });
            return this.customView = customView;
          });
          it('removes on* attributes from View options', function() {
            return expect(this.customView.options.oncustom).toBeUndefined();
          });
          return it('triggers event handler when event is triggered on View', function() {
            expect(this.customHandler).not.toHaveBeenCalled();
            this.customView.trigger('custom');
            expect(this.customHandler).toHaveBeenCalled();
            return expect(this.customHandler.calls[0].object).toBe(this.view);
          });
        });
      });
    });
    return describe('_.map( arrayOrCollection:[array,Collection], renderer:function )', function() {
      var describeEachRender;

      beforeEach(function() {
        var _this = this;

        this.items = [
          {
            name: 'a'
          }, {
            name: 'b'
          }, {
            name: 'c'
          }
        ];
        this.mapRenderer = jasmine.createSpy('mapRenderer');
        return this.mapRenderer.andCallFake(function(item) {
          return _this._('b', item.name || item.get('name'));
        });
      });
      describeEachRender = function(renderValue, expectedInnerHTML) {
        return describe("when renderer returns " + renderValue + ", expected " + expectedInnerHTML, function() {
          beforeEach(function() {
            var _this = this;

            this.ParentView = this.View.extend({
              _cellName: 'Parent',
              render: function(_) {
                return _.map(_this.items, function() {
                  return renderValue;
                });
              }
            });
            return this.view = new this.ParentView;
          });
          return it('renders correctly', function() {
            return nodeHTMLEquals(this.view.el, '<div cell="Parent" class="Parent">' + expectedInnerHTML + '</div>');
          });
        });
      };
      describeEachRender(5, '555');
      describeEachRender((function() {
        return 6;
      }), '666');
      describeEachRender('my string', 'my stringmy stringmy string');
      describeEachRender((function() {
        return 'my string2';
      }), 'my string2my string2my string2');
      describeEachRender([node('b'), node('a')], '<b></b><a></a>');
      describeEachRender((function() {
        return [node('a'), node('b')];
      }), '<a></a><b></b><a></a><b></b><a></a><b></b>');
      describeEachRender([], '');
      describeEachRender(void 0, '');
      describeEachRender((function() {
        return function() {
          return 6;
        };
      }), '');
      describe('_.map( undefined, renderer:function )', function() {
        beforeEach(function() {
          var _this = this;

          this.ParentView = this.View.extend({
            _cellName: 'Parent',
            render: function(_) {
              return _.map(void 0, _this.mapRenderer);
            }
          });
          return this.view = new this.ParentView;
        });
        it('does NOT calls renderer', function() {
          return expect(this.mapRenderer).not.toHaveBeenCalled();
        });
        return it('renders correctly', function() {
          return nodeHTMLEquals(this.view.el, '<div cell="Parent" class="Parent"></div>');
        });
      });
      describe('_.map( array:array, renderer:function )', function() {
        beforeEach(function() {
          var _this = this;

          this.ParentView = this.View.extend({
            _cellName: 'Parent',
            render: function(_) {
              return _.map(_this.items, _this.mapRenderer);
            }
          });
          return this.view = new this.ParentView;
        });
        it('calls renderer for each model in the collection', function() {
          var i, item, _i, _len, _ref, _results;

          expect(this.mapRenderer.callCount).toEqual(3);
          _ref = this.items;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            item = _ref[i];
            expect(this.mapRenderer.calls[i].args).toEqual([item, i, this.items]);
            _results.push(expect(this.mapRenderer.calls[i].object).toBe(this.view));
          }
          return _results;
        });
        return it('renders correctly', function() {
          return nodeHTMLEquals(this.view.el, '<div cell="Parent" class="Parent">' + '<b>a</b>' + '<b>b</b>' + '<b>c</b>' + '</div>');
        });
      });
      describe('_.map( array:array, renderer:function ), array is empty', function() {
        beforeEach(function() {
          var _this = this;

          this.ParentView = this.View.extend({
            _cellName: 'Parent',
            render: function(_) {
              return _.map([], _this.mapRenderer);
            }
          });
          return this.view = new this.ParentView;
        });
        it('does NOT calls renderer', function() {
          return expect(this.mapRenderer).not.toHaveBeenCalled();
        });
        return it('renders correctly', function() {
          return nodeHTMLEquals(this.view.el, '<div cell="Parent" class="Parent"></div>');
        });
      });
      describe('_.map( collection:Collection, renderer:function )', function() {
        beforeEach(function() {
          var mapRenderer;

          this.collection = new this.Collection(this.items);
          mapRenderer = this.mapRenderer;
          this.ParentView = this.View.extend({
            _cellName: 'Parent',
            render: function(_) {
              return _.map(this.collection, mapRenderer);
            }
          });
          return this.view = new this.ParentView({
            collection: this.collection
          });
        });
        it('calls renderer for each model in the collection', function() {
          var _this = this;

          expect(this.mapRenderer.callCount).toEqual(3);
          return this.collection.each(function(item, i) {
            expect(_this.mapRenderer.calls[i].args).toEqual([item, i, _this.collection]);
            return expect(_this.mapRenderer.calls[i].object).toBe(_this.view);
          });
        });
        return it('renders correctly', function() {
          return nodeHTMLEquals(this.view.el, '<div cell="Parent" class="Parent">' + '<b>a</b>' + '<b>b</b>' + '<b>c</b>' + '</div>');
        });
      });
      return describe('_.map( collection:Collection, renderer:function ), collection is empty', function() {
        beforeEach(function() {
          var mapRenderer;

          this.collection = new this.Collection;
          mapRenderer = this.mapRenderer;
          this.ParentView = this.View.extend({
            _cellName: 'Parent',
            render: function(_) {
              return _.map(this.collection, mapRenderer);
            }
          });
          return this.view = new this.ParentView({
            collection: this.collection
          });
        });
        it('does NOT calls renderer', function() {
          return expect(this.mapRenderer).not.toHaveBeenCalled();
        });
        return it('renders correctly', function() {
          return nodeHTMLEquals(this.view.el, '<div cell="Parent" class="Parent"></div>');
        });
      });
    });
  };
});

/*
//@ sourceMappingURL=View-__.spec.map
*/
