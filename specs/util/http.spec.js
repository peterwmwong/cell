// Generated by CoffeeScript 1.6.2
define(['spec-utils', 'sinon-server'], function(_arg, sinon) {
  var waitOne;

  waitOne = _arg.waitOne;
  return function(_arg1) {
    var beforeEachRequire;

    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEach(function() {
      var _this = this;

      this.xhr = sinon.useFakeXMLHttpRequest();
      this.requests = [];
      this.xhr.onCreate = function(xhr) {
        return _this.requests.push(xhr);
      };
      return this.callback = jasmine.createSpy('callback');
    });
    beforeEachRequire(['cell/util/http'], function(http) {
      this.http = http;
    });
    afterEach(function() {
      return this.xhr.restore();
    });
    return describe('http( { method:string, url:string, data:string, headers:object, timeout:number, withCredentials:boolean, responseType:string }, callback:function )', function() {
      describe('http protocol', function() {
        it("should do basics - open async xhr", function() {
          var request;

          this.http({
            method: "GET",
            url: "/some-url"
          }, function() {});
          request = this.requests[0];
          expect(request.method).toBe("GET");
          expect(request.url).toBe("/some-url");
          return expect(request.async).toBe(true);
        });
        it("should normalize IE's 1223 status code into 204", function() {
          var request;

          this.callback.andCallFake(function(status) {
            return expect(status).toBe(204);
          });
          this.http({
            method: "GET",
            url: "URL"
          }, this.callback);
          request = this.requests[0];
          request.respond(1223);
          return expect(this.callback.callCount).toBe(1);
        });
        it("should set only the requested headers", function() {
          var request;

          this.http({
            method: "POST",
            url: "URL",
            headers: {
              "X-header1": "value1",
              "X-header2": "value2"
            },
            data: 'yolo'
          }, (function() {}));
          request = this.requests[0];
          expect(request.requestHeaders["X-header1"]).toBe("value1");
          expect(request.requestHeaders["X-header2"]).toBe("value2");
          return expect(request.requestBody).toBe("yolo");
        });
        it("should abort request on timeout", function() {
          var done, request,
            _this = this;

          this.callback.andCallFake(function(status, response) {
            expect(status).toBe(-1);
            return expect(request.aborted).toBe(true);
          });
          this.http({
            method: "GET",
            url: "URL",
            timeout: 1000
          }, this.callback);
          request = this.requests[0];
          done = false;
          runs(function() {
            return setTimeout((function() {
              return done = true;
            }), 1000);
          });
          waitsFor(function() {
            return done;
          });
          return runs(function() {
            return expect(this.callback.callCount).toBe(1);
          });
        });
        it("should register onreadystatechange callback before sending", function() {
          var SyncXhr;

          SyncXhr = function() {
            var xhr;

            xhr = this;
            this.open = this.setRequestHeader = function() {};
            this.send = function() {
              this.status = 200;
              this.responseText = "response";
              this.readyState = 4;
              return this.onreadystatechange();
            };
            this.getAllResponseHeaders = function() {
              return "";
            };
            this.getResponseHeader = function() {
              return "";
            };
          };
          this.callback.andCallFake(function(status, response) {
            expect(status).toBe(200);
            return expect(response).toBe("response");
          });
          this.http.XHR = SyncXhr;
          this.http({
            method: "GET",
            url: "/url"
          }, this.callback);
          return expect(this.callback.callCount).toBe(1);
        });
        it("should set withCredentials", function() {
          this.http({
            method: "GET",
            url: "/some.url",
            withCredentials: true
          }, this.callback);
          return expect(this.requests[0].withCredentials).toBe(true);
        });
        return it("should set responseType and return xhr.response", function() {
          var request;

          request = void 0;
          this.http.XHR = function() {
            request = this;
            this.open = this.setRequestHeader = function() {};
            this.send = function() {
              this.status = 200;
              this.responseType = request.responseType;
              this.response = {
                some: "object"
              };
              this.readyState = 4;
              return this.onreadystatechange();
            };
            this.getAllResponseHeaders = function() {
              return "";
            };
            this.getResponseHeader = function() {
              return "";
            };
          };
          this.callback.andCallFake(function(status, response) {
            return expect(response).toEqual({
              some: "object"
            });
          });
          this.http({
            method: "GET",
            url: "/some.url",
            responseType: 'blob'
          }, this.callback);
          expect(request.responseType).toBe('blob');
          return expect(this.callback.callCount).toBe(1);
        });
      });
      return describe("file protocol", function() {
        it("should convert 0 to 200 if content", function() {
          this.http({
            method: "GET",
            url: "file:///whatever/index.html"
          }, this.callback);
          this.requests[0].respond(0, {}, "SOME CONTENT");
          expect(this.callback).toHaveBeenCalled();
          return expect(this.callback.calls[0].args[0]).toBe(200);
        });
        return it("should convert 0 to 404 if no content", function() {
          this.http({
            method: "GET",
            url: "file:///whatever/index.html"
          }, this.callback);
          this.requests[0].respond(0, {}, "");
          expect(this.callback).toHaveBeenCalled();
          return expect(this.callback.calls[0].args[0]).toBe(404);
        });
      });
    });
  };
});

/*
//@ sourceMappingURL=http.spec.map
*/
