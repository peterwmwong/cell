// Generated by CoffeeScript 1.4.0

define(function(require) {
  var exports, nodeHTMLEquals, nodeToHTML, _;
  _ = require('underscore');
  return exports = {
    stringify: function(obj, excludeArrayBrackets) {
      var k, str, v;
      if (obj === void 0) {
        return "undefined";
      } else if (obj === null) {
        return "null";
      } else if ((obj.jquery != null) || _.isArray(obj)) {
        str = _.map(obj, exports.stringify).join(', ');
        if (excludeArrayBrackets) {
          return str;
        } else {
          return "[" + str + "]";
        }
      } else if (obj.nodeType === 1) {
        return "<" + (obj.tagName.toLowerCase()) + "/>";
      } else if (_.isObject(obj)) {
        return "{" + (((function() {
          var _results;
          _results = [];
          for (k in obj) {
            v = obj[k];
            _results.push("" + k + ":" + (exports.stringify(v)));
          }
          return _results;
        })()).join(',')) + "}";
      } else {
        return JSON.stringify(obj);
      }
    },
    node: function(tag) {
      return document.createElement(tag);
    },
    nodeHTMLEquals: nodeHTMLEquals = function(node, expectedHTML) {
      expect(node instanceof HTMLElement).toBe(true);
      return expect(nodeToHTML(node)).toBe(expectedHTML);
    },
    nodeToHTML: nodeToHTML = function(node) {
      var html, list;
      if (node.tagName) {
        html = "<" + (node.tagName.toLowerCase());
        if (node.attributes.length > 0) {
          list = _.filter(node.attributes, function(_arg) {
            var name;
            name = _arg.name;
            return name !== 'cellcid';
          });
          list.sort(function(a, b) {
            if (a.name === b.name) {
              return 0;
            } else if (a.name < b.name) {
              return -1;
            } else {
              return 1;
            }
          });
          _.each(list, function(el) {
            return html += " " + el.name + "=\"" + el.value + "\"";
          });
        }
        html += ">";
        _.each($(node).contents(), function(el) {
          return html += nodeToHTML(el);
        });
        return html += "</" + (node.tagName.toLowerCase()) + ">";
      } else {
        return $(node).text();
      }
    }
  };
});
