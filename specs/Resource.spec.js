// Generated by CoffeeScript 1.6.2
var __slice = [].slice;

define(function() {
  return function(_arg) {
    var beforeEachRequire, http;

    beforeEachRequire = _arg.beforeEachRequire;
    beforeEachRequire({
      'cell/util/http': http = jasmine.createSpy('http')
    }, ['cell/Model', 'cell/Resource', 'cell/Collection'], function(Model, Resource, Collection) {
      this.Model = Model;
      this.Resource = Resource;
      this.Collection = Collection;
      http.reset();
      this.http = http;
      return this.addMatchers({
        toHaveBeenCalledWithCallback: function() {
          var actualArgs, args, expectedArg, i, mismatchedKeys, mismatchedValues, _i, _len;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          actualArgs = this.actual.calls[0].args;
          mismatchedKeys = [];
          mismatchedValues = [];
          for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
            expectedArg = args[i];
            if (!this.env.equals_(actualArgs[i], expectedArg, mismatchedKeys, mismatchedValues)) {
              this.message = function() {
                return "Expected " + (JSON.stringify(actualArgs[i])) + " to equal " + (JSON.stringify(expectedArg)) + ", " + mismatchedKeys + ", " + mismatchedValues;
              };
              return false;
            }
          }
          return typeof actualArgs[args.length] === 'function';
        }
      });
    });
    describe('new Resource( {url:string, params?:object, transform?:function, model?:Model, collection?:Collection} )', function() {
      describe('When a model is specified', function() {
        beforeEach(function() {
          this.MyModel = this.Model.extend();
          return this.res = new this.Resource({
            url: '/yolo/{id}',
            transform: this.transform,
            model: this.MyModel
          });
        });
        return describe('Extends, instantiates, and returns specified model on...', function() {
          it('@get()', function() {
            this.res_inst = this.res.get({
              id: 'blah'
            });
            expect(this.res_inst instanceof this.MyModel).toBe(true);
            return expect(this.res_inst instanceof this.Model).toBe(true);
          });
          return it('@create()', function() {
            this.res_inst = this.res.create({
              id: 'blah'
            });
            expect(this.res_inst instanceof this.MyModel).toBe(true);
            return expect(this.res_inst instanceof this.Model).toBe(true);
          });
        });
      });
      describe('When a collection is specified', function() {
        beforeEach(function() {
          this.MyCollection = this.Collection.extend();
          this.res = new this.Resource({
            url: '/yolo/{id}',
            transform: this.transform,
            collection: this.MyCollection
          });
          return this.res_inst = this.res.query({
            id: 'blah'
          });
        });
        return it('Extends, instantiates, and returns specified model on @query()', function() {
          expect(this.res_inst instanceof this.MyCollection).toBe(true);
          return expect(this.res_inst instanceof this.Collection).toBe(true);
        });
      });
      describe('When a transform function is specified', function() {
        beforeEach(function() {
          return this.transform = jasmine.createSpy('transform').andCallFake(function(jsonObj) {
            return {
              b: 777
            };
          });
        });
        describe('called upon @get() response', function() {
          beforeEach(function() {
            this.res = new this.Resource({
              url: '/yolo/{id}',
              transform: this.transform
            });
            this.res_inst = this.res.get({
              id: 'blah'
            });
            return this.http.calls[0].args[1](200, JSON.stringify({
              one: 1,
              two: 'deux',
              three: 'san'
            }), true);
          });
          it('calls transform()', function() {
            return expect(this.transform).toHaveBeenCalledWith({
              one: 1,
              two: 'deux',
              three: 'san'
            });
          });
          return it('assigns data returned from transform', function() {
            return expect(this.res_inst.attributes()).toEqual({
              b: 777
            });
          });
        });
        describe('called upon @query() response', function() {
          beforeEach(function() {
            this.res = new this.Resource({
              url: '/yolo/{id}',
              transform: this.transform
            });
            this.res_col = this.res.query({
              id: 'blah'
            });
            return this.http.calls[0].args[1](200, JSON.stringify([
              {
                one: 1
              }, {
                two: 'deux'
              }, {
                three: 'san'
              }
            ]), true);
          });
          it('calls transform', function() {
            expect(this.transform).toHaveBeenCalledWith({
              one: 1
            });
            expect(this.transform).toHaveBeenCalledWith({
              two: 'deux'
            });
            return expect(this.transform).toHaveBeenCalledWith({
              three: 'san'
            });
          });
          return it('assigns data returned from transform', function() {
            return this.res_col.map(function(obj) {
              return expect(obj.attributes()).toEqual({
                b: 777
              });
            });
          });
        });
        return describe('called upon @$save() response', function() {
          beforeEach(function() {
            this.res = new this.Resource({
              url: '/yolo/{id}',
              transform: this.transform
            });
            this.res_inst = this.res.create();
            this.res_inst.$save();
            return this.http.calls[0].args[1](200, JSON.stringify({
              one: 1,
              two: 'deux',
              three: 'san'
            }), true);
          });
          it('calls transform', function() {
            return expect(this.transform).toHaveBeenCalledWith({
              one: 1,
              two: 'deux',
              three: 'san'
            });
          });
          return it('assigns data returned from transform', function() {
            return expect(this.res_inst.attributes()).toEqual({
              b: 777
            });
          });
        });
      });
      beforeEach(function() {
        return this.resource = new this.Resource({
          url: '/{defaultPathParam}/{pathParam}',
          params: {
            defaultPathParam: 'default'
          }
        });
      });
      describe('@genUrl( params:object ) : String', function() {
        var describeGenUrl, params;

        describeGenUrl = function(urlWithParams, inputParams, outputUrl) {
          var inputParamsDisableQueryParams, k;

          inputParamsDisableQueryParams = {};
          for (k in inputParams) {
            inputParamsDisableQueryParams[k] = inputParams[k];
          }
          return it("When url is '" + urlWithParams + "', resource.genUrl( " + (JSON.stringify(inputParams)) + ", false ) === '" + outputUrl + "'", function() {
            var resource;

            resource = new this.Resource({
              url: urlWithParams
            });
            return expect(resource.genUrl(inputParams)).toBe(outputUrl);
          });
        };
        params = function() {
          return {
            one: 1,
            two2: 'deux',
            thr_ee: '{san}'
          };
        };
        describeGenUrl('/x', params(), '/x?one=1&two2=deux&thr_ee=%7Bsan%7D', '/x');
        describeGenUrl('/x/{one}', params(), '/x/1?two2=deux&thr_ee=%7Bsan%7D', '/x/1');
        describeGenUrl('/x/{thr_ee}', params(), '/x/%7Bsan%7D?one=1&two2=deux', '/x/%7Bsan%7D');
        return describeGenUrl('/x/{one}/{two2}/{thr_ee}', params(), '/x/1/deux/%7Bsan%7D', '/x/1/deux/%7Bsan%7D');
      });
      describe('@create( attributes:object ) : Model', function() {
        beforeEach(function() {
          this.resourceItem = this.resource.create({
            one: 1,
            two: 'duex',
            three: 'san'
          });
          return this.resourceItem.on('status', this.statusHandler = jasmine.createSpy('status'));
        });
        it('should NOT issue a HTTP request', function() {
          return expect(this.http).not.toHaveBeenCalled();
        });
        it('creates an empty Resource.Instance (Model)', function() {
          expect(this.resourceItem instanceof this.Model).toBe(true);
          return expect(this.resourceItem.attributes()).toEqual({
            one: 1,
            two: 'duex',
            three: 'san'
          });
        });
        describe('when $save() is called', function() {
          beforeEach(function() {
            return this.resourceItem.$save({
              pathParam: 'pathParam',
              queryParam: 'queryValue'
            });
          });
          it('issues a HTTP request', function() {
            return expect(this.http).toHaveBeenCalledWithCallback({
              method: 'POST',
              url: '/default/pathParam?queryParam=queryValue',
              data: JSON.stringify({
                one: 1,
                two: 'duex',
                three: 'san'
              })
            });
          });
          it('sets status() to "saving"', function() {
            return expect(this.resourceItem.status()).toBe('saving');
          });
          it('emits "status" event', function() {
            return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'saving');
          });
          describe('when http error occurs', function() {
            beforeEach(function() {
              this.statusHandler.reset();
              return this.http.calls[0].args[1](404, void 0, false);
            });
            it('sets status() to "error"', function() {
              return expect(this.resourceItem.status()).toBe('error');
            });
            return it('emits "status" event', function() {
              return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'error');
            });
          });
          return describe('when http responds successfully', function() {
            beforeEach(function() {
              this.statusHandler.reset();
              return this.http.calls[0].args[1](200, JSON.stringify({
                one: 1,
                two: 'deux',
                three: 'san'
              }), true);
            });
            it('sets status() to "ok"', function() {
              return expect(this.resourceItem.status()).toBe('ok');
            });
            return it('emits "status" event', function() {
              return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'ok');
            });
          });
        });
        return describe('when $delete() is called', function() {
          beforeEach(function() {
            return this.resourceItem.$delete({
              pathParam: 'pathParam',
              queryParam: 'queryValue'
            });
          });
          return it("does NOT issue a HTTP request (because it's new)", function() {
            return expect(this.http).not.toHaveBeenCalled();
          });
        });
      });
      describe('@get( params:object ) : Model', function() {
        beforeEach(function() {
          this.resourceItem = this.resource.get({
            pathParam: 'path',
            queryParam: 'queryValue'
          });
          return this.resourceItem.on('status', this.statusHandler = jasmine.createSpy('status'));
        });
        it('issues a HTTP request', function() {
          return expect(this.http).toHaveBeenCalledWithCallback({
            method: 'GET',
            url: '/default/path?queryParam=queryValue'
          });
        });
        it('creates an empty Model', function() {
          expect(this.resourceItem instanceof this.Model).toBe(true);
          return expect(this.resourceItem.attributes()).toEqual({});
        });
        it('sets status() to "loading"', function() {
          return expect(this.resourceItem.status()).toBe('loading');
        });
        describe('when http error occurs', function() {
          beforeEach(function() {
            return this.http.calls[0].args[1](404, void 0, false);
          });
          it('sets status() to "error"', function() {
            return expect(this.resourceItem.status()).toBe('error');
          });
          return it('emits "status" event', function() {
            return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'error');
          });
        });
        return describe('when http responds successfully', function() {
          beforeEach(function() {
            this.statusHandler.reset();
            return this.http.calls[0].args[1](200, JSON.stringify({
              one: 1,
              two: 'deux',
              three: 'san'
            }), true);
          });
          it('assigns all properties', function() {
            return expect(this.resourceItem.attributes()).toEqual({
              one: 1,
              two: 'deux',
              three: 'san'
            });
          });
          it('sets status() to "ok"', function() {
            return expect(this.resourceItem.status()).toBe('ok');
          });
          it('emits "status" event', function() {
            return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'ok');
          });
          describe('when $save() is called', function() {
            beforeEach(function() {
              this.http.reset();
              this.resourceItem.set('one', 'yi');
              return this.resourceItem.$save({
                pathParam: 'pathParam',
                queryParam: 'queryValue'
              });
            });
            return it('issues a HTTP PUT request', function() {
              return expect(this.http).toHaveBeenCalledWithCallback({
                method: 'PUT',
                url: '/default/pathParam?queryParam=queryValue',
                data: JSON.stringify({
                  one: 'yi',
                  two: 'deux',
                  three: 'san'
                })
              });
            });
          });
          return describe('when $delete() is called', function() {
            beforeEach(function() {
              this.statusHandler.reset();
              this.http.reset();
              return this.resourceItem.$delete({
                pathParam: 'pathParam',
                queryParam: 'queryValue'
              });
            });
            it('issues a HTTP PUT request', function() {
              return expect(this.http).toHaveBeenCalledWithCallback({
                method: 'DELETE',
                url: '/default/pathParam?queryParam=queryValue'
              });
            });
            it('sets status() to "deleting"', function() {
              return expect(this.resourceItem.status()).toBe('deleting');
            });
            it('emits "status" event', function() {
              return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'deleting');
            });
            describe('when http error occurs', function() {
              beforeEach(function() {
                this.statusHandler.reset();
                return this.http.calls[0].args[1](404, void 0, false);
              });
              it('sets status() to "error"', function() {
                return expect(this.resourceItem.status()).toBe('error');
              });
              return it('emits "status" event', function() {
                return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'error');
              });
            });
            return describe('when http responds successfully', function() {
              beforeEach(function() {
                this.statusHandler.reset();
                return this.http.calls[0].args[1](200, {}, true);
              });
              it('sets status() to "deleted"', function() {
                return expect(this.resourceItem.status()).toBe('deleted');
              });
              return it('emits "status" event', function() {
                return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'deleted');
              });
            });
          });
        });
      });
      return describe('@query( params:object ) : ResourceCollectionInstance', function() {
        beforeEach(function() {
          this.resourceItem = this.resource.query({
            pathParam: 'path',
            queryParam: 'queryValue'
          });
          return this.resourceItem.on('status', this.statusHandler = jasmine.createSpy('status'));
        });
        it('issues a HTTP request', function() {
          return expect(this.http).toHaveBeenCalledWithCallback({
            method: 'GET',
            url: '/default/path?queryParam=queryValue'
          });
        });
        it('creates an empty Resource.CollectionInstance (Model)', function() {
          expect(this.resourceItem instanceof this.Collection).toBe(true);
          return expect(this.resourceItem.length()).toBe(0);
        });
        it('sets status() to "loading"', function() {
          return expect(this.resourceItem.status()).toBe('loading');
        });
        describe('when http error occurs', function() {
          beforeEach(function() {
            this.statusHandler.reset();
            return this.http.calls[0].args[1](404, void 0, false);
          });
          it('sets status() to "error"', function() {
            return expect(this.resourceItem.status()).toBe('error');
          });
          return it('emits "status" event', function() {
            return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'error');
          });
        });
        return describe('when http responds successfully', function() {
          beforeEach(function() {
            return this.http.calls[0].args[1](200, JSON.stringify([
              {
                id: 123,
                name: 'Grace'
              }, {
                id: 456,
                name: 'Peter'
              }
            ]), true);
          });
          it('adds all Models', function() {
            expect(this.resourceItem.at(0).attributes()).toEqual({
              id: 123,
              name: 'Grace'
            });
            return expect(this.resourceItem.at(1).attributes()).toEqual({
              id: 456,
              name: 'Peter'
            });
          });
          it('sets status() to "ok"', function() {
            return expect(this.resourceItem.status()).toBe('ok');
          });
          return it('emits "status" event', function() {
            return expect(this.statusHandler).toHaveBeenCalledWith('status', this.resourceItem, 'ok');
          });
        });
      });
    });
    describe('ResourceCollectionInstance', function() {
      it('is an instanceof Collection', function() {});
      return describe('@requery( params:object ) : ', function() {});
    });
    return describe('Resource.Instance', function() {
      describe('@delete( params:object ) : Resource.Instance', function() {});
      return describe('@save( params:object ) : Resource.Instance', function() {});
    });
  };
});

/*
//@ sourceMappingURL=Resource.spec.map
*/
