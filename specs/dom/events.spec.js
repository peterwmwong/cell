// Generated by CoffeeScript 1.6.2
define(['../utils/spec-utils', '../utils/spec-matchers'], function(_arg, matchers) {
  var browserTrigger, node;

  node = _arg.node, browserTrigger = _arg.browserTrigger;
  return function(_arg1) {
    var beforeEachRequire;

    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['dom/events'], function(events) {
      var _ref;

      this.events = events;
      this.addMatchers(matchers);
      this.element = node('div');
      this.domFixture.appendChild(this.element);
      return _ref = this.events, this.on = _ref.on, this.off = _ref.off, _ref;
    });
    describe('on( element:DOMNode, type:string, handler:function, ctx?:object)', function() {
      it('should on to window on hashchange', function() {
        var eventFn, handler, window;

        eventFn = void 0;
        window = {
          addEventListener: function(type, fn) {
            expect(type).toEqual('hashchange');
            eventFn = fn;
          },
          removeEventListener: function() {},
          attachEvent: function(type, fn) {
            expect(type).toEqual('onhashchange');
            eventFn = fn;
          },
          detachEvent: function() {}
        };
        handler = jasmine.createSpy('onHashChange');
        this.events.on(window, 'hashchange', handler);
        eventFn({
          type: 'hashchange'
        });
        return expect(handler).toHaveBeenCalled();
      });
      it('should set event.target on IE', function() {
        var called,
          _this = this;

        called = false;
        this.events.on(this.element, 'click', function(event) {
          expect(event.target).toBe(_this.element);
          return called = true;
        });
        browserTrigger(this.element, 'click');
        return expect(called).toBe(true);
      });
      it('should have event.isDefaultPrevented method', function() {
        this.events.on(this.element, 'click', function(e) {
          return expect(function() {
            expect(e.isDefaultPrevented()).toBe(false);
            e.preventDefault();
            return expect(e.isDefaultPrevented()).toBe(true);
          }).not.toThrow();
        });
        return browserTrigger(this.element, 'click');
      });
      it('should call handler with this set to ctx if ctx provided', function() {
        this.events.on(this.element, 'click', (this.handler = jasmine.createSpy('click')), (this.ctx = {}));
        browserTrigger(this.element, 'click');
        return expect(this.handler.calls[0].object).toBe(this.ctx);
      });
      return describe('mouseenter-mouseleave', function() {
        beforeEach(function() {
          var _this = this;

          this.log = '';
          this.root = node('div');
          this.root.appendChild(this.parent = node('p'));
          this.parent.appendChild(this.child = node('span'));
          this.root.appendChild(this.sibling = node('ul'));
          this.events.on(this.parent, 'mouseenter', function() {
            return _this.log += 'parentEnter';
          });
          this.events.on(this.parent, 'mouseleave', function() {
            return _this.log += 'parentLeave';
          });
          this.parent.mouseover = function() {
            return browserTrigger(_this.parent, 'mouseover');
          };
          this.parent.mouseout = function() {
            return browserTrigger(_this.parent, 'mouseout');
          };
          this.events.on(this.child, 'mouseenter', function() {
            return _this.log += 'childEnter';
          });
          this.events.on(this.child, 'mouseleave', function() {
            return _this.log += 'childLeave';
          });
          this.child.mouseover = function() {
            return browserTrigger(_this.child, 'mouseover');
          };
          return this.child.mouseout = function() {
            return browserTrigger(_this.child, 'mouseout');
          };
        });
        return it('should fire mouseenter when coming from outside the browser window', function() {
          this.parent.mouseover();
          expect(this.log).toEqual('parentEnter');
          this.child.mouseover();
          expect(this.log).toEqual('parentEnterchildEnter');
          this.child.mouseover();
          expect(this.log).toEqual('parentEnterchildEnter');
          this.child.mouseout();
          expect(this.log).toEqual('parentEnterchildEnter');
          this.child.mouseout();
          expect(this.log).toEqual('parentEnterchildEnterchildLeave');
          this.parent.mouseout();
          return expect(this.log).toEqual('parentEnterchildEnterchildLeaveparentLeave');
        });
      });
    });
    return describe('off', function() {
      it('should do nothing when no listener was registered with bound', function() {
        this.events.off(this.element);
        this.events.off(this.element, 'click');
        return this.events.off(this.element, 'click', function() {});
      });
      it('should deregister all listeners', function() {
        var clickSpy, mouseoverSpy;

        clickSpy = jasmine.createSpy('click');
        mouseoverSpy = jasmine.createSpy('mouseover');
        this.on(this.element, 'click', clickSpy);
        this.on(this.element, 'mouseover', mouseoverSpy);
        browserTrigger(this.element, 'click');
        expect(clickSpy).toHaveBeenCalledOnce();
        browserTrigger(this.element, 'mouseover');
        expect(mouseoverSpy).toHaveBeenCalledOnce();
        clickSpy.reset();
        mouseoverSpy.reset();
        this.off(this.element);
        browserTrigger(this.element, 'click');
        expect(clickSpy).not.toHaveBeenCalled();
        browserTrigger(this.element, 'mouseover');
        return expect(mouseoverSpy).not.toHaveBeenCalled();
      });
      it('should deregister listeners for specific type', function() {
        var clickSpy, mouseoverSpy;

        clickSpy = jasmine.createSpy('click');
        mouseoverSpy = jasmine.createSpy('mouseover');
        this.on(this.element, 'click', clickSpy);
        this.on(this.element, 'mouseover', mouseoverSpy);
        browserTrigger(this.element, 'click');
        expect(clickSpy).toHaveBeenCalledOnce();
        browserTrigger(this.element, 'mouseover');
        expect(mouseoverSpy).toHaveBeenCalledOnce();
        clickSpy.reset();
        mouseoverSpy.reset();
        this.off(this.element, 'click');
        browserTrigger(this.element, 'click');
        expect(clickSpy).not.toHaveBeenCalled();
        browserTrigger(this.element, 'mouseover');
        expect(mouseoverSpy).toHaveBeenCalledOnce();
        mouseoverSpy.reset();
        this.off(this.element, 'mouseover');
        browserTrigger(this.element, 'mouseover');
        return expect(mouseoverSpy).not.toHaveBeenCalled();
      });
      return it('should deregister a specific listener', function() {
        var clickSpy1, clickSpy2;

        clickSpy1 = jasmine.createSpy('click1');
        clickSpy2 = jasmine.createSpy('click2');
        this.on(this.element, 'click', clickSpy1);
        this.on(this.element, 'click', clickSpy2);
        browserTrigger(this.element, 'click');
        expect(clickSpy1).toHaveBeenCalledOnce();
        expect(clickSpy2).toHaveBeenCalledOnce();
        clickSpy1.reset();
        clickSpy2.reset();
        this.off(this.element, 'click', clickSpy1);
        browserTrigger(this.element, 'click');
        expect(clickSpy1).not.toHaveBeenCalled();
        expect(clickSpy2).toHaveBeenCalledOnce();
        clickSpy2.reset();
        this.off(this.element, 'click', clickSpy2);
        browserTrigger(this.element, 'click');
        return expect(clickSpy2).not.toHaveBeenCalled();
      });
    });
  };
});

/*
//@ sourceMappingURL=events.spec.map
*/
