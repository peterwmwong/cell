// Generated by CoffeeScript 1.6.3
define(['spec-utils', 'spec-matchers'], function(_arg, matchers) {
  var browserTrigger, node;
  node = _arg.node, browserTrigger = _arg.browserTrigger;
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['cell/dom/data', 'cell/dom/events'], function(data, events) {
      this.data = data;
      this.events = events;
      this.addMatchers(matchers);
      return this.element = node('div');
    });
    describe('data.set( element:DOMElement, key:string, value:any ) and data.get( element:DOMElement, key:string )', function() {
      return it('should get and set and remove data', function() {
        expect(this.data.get(this.element, 'prop')).toBeUndefined();
        this.data.set(this.element, 'prop', 'value');
        expect(this.data.get(this.element, 'prop')).toBe('value');
        this.data.remove(this.element, 'prop');
        return expect(this.data.get(this.element, 'prop')).toBeUndefined();
      });
    });
    it('data.get( element:DOMElement )', function() {
      expect(this.data.get(this.element)).toEqual({});
      this.data.set(this.element, 'foo', 'bar');
      expect(this.data.get(this.element)).toEqual({
        foo: 'bar'
      });
      this.data.get(this.element).baz = 'xxx';
      return expect(this.data.get(this.element)).toEqual({
        foo: 'bar',
        baz: 'xxx'
      });
    });
    return describe('data cleanup', function() {
      beforeEach(function() {
        this.element.innerHTML = '<span></span>';
        this.span = this.element.children[0];
        return this.data.set(this.element, 'name', 'divy');
      });
      it('should remove data on element removal', function() {
        this.data.remove(this.element);
        return expect(this.data.get(this.element, 'name')).toBeUndefined();
      });
      return it('should remove event listeners on element removal', function() {
        var log;
        log = [];
        this.events.on(this.span, 'click', function() {
          return log.push('click');
        });
        browserTrigger(this.span, 'click');
        expect(log).toEqual(['click']);
        this.data.remove(this.span);
        log = [];
        browserTrigger(this.span, 'click');
        return expect(log).toEqual([]);
      });
    });
  };
});

/*
//@ sourceMappingURL=data.spec.map
*/
