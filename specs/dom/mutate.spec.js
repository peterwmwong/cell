// Generated by CoffeeScript 1.6.2
define(['spec-utils', 'spec-matchers'], function(_arg, matchers) {
  var browserTrigger, node;

  node = _arg.node, browserTrigger = _arg.browserTrigger;
  return function(_arg1) {
    var beforeEachRequire;

    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['cell/dom/mutate', 'cell/dom/events', 'cell/View'], function(mutate, events, View) {
      this.mutate = mutate;
      this.events = events;
      this.View = View;
      this.addMatchers(matchers);
      this.parentElement = node('div');
      this.element = node('div');
      this.parentElement.appendChild(this.element);
      return this.CustomView = this.View.extend();
    });
    return describe('@remove( element:DOMElement )', function() {
      it("removes element from it's parent element", function() {
        expect(this.parentElement.children.length).toBe(1);
        this.mutate.remove(this.element);
        return expect(this.parentElement.children.length).toBe(0);
      });
      describe('When element is associated with a View', function() {
        beforeEach(function() {
          this.customView = new this.CustomView();
          return spyOn(this.customView, 'destroy');
        });
        return it('calls View.destroy()', function() {
          expect(this.customView.destroy).not.toHaveBeenCalled();
          this.mutate.remove(this.customView.el);
          return expect(this.customView.destroy).toHaveBeenCalled();
        });
      });
      describe('When element has a child element associated with a View', function() {
        beforeEach(function() {
          this.customView = new this.CustomView();
          spyOn(this.customView, 'destroy');
          return this.element.appendChild(this.customView.el);
        });
        return it('calls View.destroy()', function() {
          expect(this.customView.destroy).not.toHaveBeenCalled();
          this.mutate.remove(this.element);
          return expect(this.customView.destroy).toHaveBeenCalled();
        });
      });
      describe('When element has an event listener', function() {
        beforeEach(function() {
          return this.events.on(this.element, 'click', this.clickHandler = jasmine.createSpy('click'));
        });
        return it('should remove event listeners', function() {
          expect(this.clickHandler).not.toHaveBeenCalled();
          this.mutate.remove(this.element);
          browserTrigger(this.element, 'click');
          return expect(this.clickHandler).not.toHaveBeenCalled();
        });
      });
      return describe('When element has a child element that has event listener', function() {
        beforeEach(function() {
          this.childElement = node('span');
          this.element.appendChild(this.childElement);
          return this.events.on(this.childElement, 'click', this.clickHandler = jasmine.createSpy('click'));
        });
        return it('should remove event listeners', function() {
          expect(this.clickHandler).not.toHaveBeenCalled();
          this.mutate.remove(this.element);
          browserTrigger(this.childElement, 'click');
          return expect(this.clickHandler).not.toHaveBeenCalled();
        });
      });
    });
  };
});

/*
//@ sourceMappingURL=mutate.spec.map
*/
