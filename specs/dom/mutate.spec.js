// Generated by CoffeeScript 1.6.3
define(['spec-utils', 'spec-matchers'], function(_arg, matchers) {
  var browserTrigger, node;
  node = _arg.node, browserTrigger = _arg.browserTrigger;
  return function(_arg1) {
    var beforeEachRequire;
    beforeEachRequire = _arg1.beforeEachRequire;
    beforeEachRequire(['cell/dom/mutate', 'cell/dom/events', 'cell/View'], function(mutate, events, View) {
      this.mutate = mutate;
      this.events = events;
      this.View = View;
      this.addMatchers(matchers);
      this.parentElement = node('div');
      this.element = node('div');
      this.parentElement.appendChild(this.element);
      return this.CustomView = this.View.extend({
        _cellName: 'CustomView'
      });
    });
    return describe('@remove( element:DOMElement )', function() {
      it("removes element from it's parent element", function() {
        expect(this.parentElement.children.length).toBe(1);
        this.mutate.remove(this.element);
        return expect(this.parentElement.children.length).toBe(0);
      });
      describe('When element is associated with a View', function() {
        beforeEach(function() {
          this.customView = new this.CustomView();
          return spyOn(this.customView, 'destroy');
        });
        return it('calls View.destroy()', function() {
          expect(this.customView.destroy).not.toHaveBeenCalled();
          this.mutate.remove(this.customView.el);
          return expect(this.customView.destroy).toHaveBeenCalled();
        });
      });
      describe('When element has child elements associated with a View', function() {
        beforeEach(function() {
          this.customView = new this.CustomView();
          this.customView2 = new this.CustomView();
          this.customView.destroy = this.destroySpy = jasmine.createSpy('destroy').andCallFake(this.CustomView.prototype.destroy);
          this.customView2.destroy = this.destroySpy2 = jasmine.createSpy('destroy2').andCallFake(this.CustomView.prototype.destroy);
          this.element.appendChild(this.customView.el);
          return this.element.appendChild(this.customView2.el);
        });
        return it('calls View.destroy()', function() {
          expect(this.destroySpy).not.toHaveBeenCalled();
          expect(this.destroySpy2).not.toHaveBeenCalled();
          this.mutate.remove(this.element);
          expect(this.destroySpy).toHaveBeenCalled();
          return expect(this.destroySpy2).toHaveBeenCalled();
        });
      });
      describe('When element has children with event listeners', function() {
        beforeEach(function() {
          this.child1 = node('div');
          this.events.on(this.child1, 'click', this.child1ClickHandler = jasmine.createSpy('child1ClickHandler'));
          this.child2 = node('div');
          this.events.on(this.child2, 'click', this.child2ClickHandler = jasmine.createSpy('child2ClickHandler'));
          this.element.appendChild(this.child1);
          this.element.appendChild(this.child2);
          return this.element.appendChild(node('div'));
        });
        return it('should remove event listeners from children', function() {
          expect(this.child1ClickHandler).not.toHaveBeenCalled();
          expect(this.child2ClickHandler).not.toHaveBeenCalled();
          this.mutate.remove(this.element);
          browserTrigger(this.child1, 'click');
          browserTrigger(this.child2, 'click');
          expect(this.child1ClickHandler).not.toHaveBeenCalled();
          return expect(this.child2ClickHandler).not.toHaveBeenCalled();
        });
      });
      describe('When element has an event listener', function() {
        beforeEach(function() {
          return this.events.on(this.element, 'click', this.clickHandler = jasmine.createSpy('click'));
        });
        return it('should remove event listeners', function() {
          expect(this.clickHandler).not.toHaveBeenCalled();
          this.mutate.remove(this.element);
          browserTrigger(this.element, 'click');
          return expect(this.clickHandler).not.toHaveBeenCalled();
        });
      });
      return describe('When element has a child element that has event listener', function() {
        beforeEach(function() {
          this.childElement = node('span');
          this.element.appendChild(this.childElement);
          return this.events.on(this.childElement, 'click', this.clickHandler = jasmine.createSpy('click'));
        });
        return it('should remove event listeners', function() {
          expect(this.clickHandler).not.toHaveBeenCalled();
          this.mutate.remove(this.element);
          browserTrigger(this.childElement, 'click');
          return expect(this.clickHandler).not.toHaveBeenCalled();
        });
      });
    });
  };
});

/*
//@ sourceMappingURL=mutate.spec.map
*/
