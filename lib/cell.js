// Generated by CoffeeScript 1.3.1
(function() {
  var E, cell, document, exports, window, _bind, _isArray, _isNode, _isObj, _parseHAML, _range, _renderNodes,
    __slice = [].slice;

  E = typeof (typeof console !== "undefined" && console !== null ? console.error : void 0) === 'function' ? (function(msg) {
    return console.error(msg);
  }) : function() {};

  window = this;

  document = window.document || {
    createElement: function() {}
  };

  _isObj = function(o) {
    return (o != null ? o.constructor : void 0) === Object;
  };

  _isNode = typeof Node === 'object' ? function(o) {
    return o instanceof Node;
  } : function(o) {
    return typeof o === 'object' && typeof o.nodeType === 'number' && typeof o.nodeName === 'string';
  };

  _isArray = Array.isArray || function(obj) {
    return obj && obj.push === Array.prototype.push && (obj.length != null);
  };

  _bind = Function.prototype.bind ? function(func, obj) {
    return func.bind(obj);
  } : function(func, obj) {
    return function() {
      return func.apply(obj, arguments);
    };
  };

  _range = document.createRange();

  _renderNodes = function(parent, nodes) {
    var c, _ref;
    while (nodes.length > 0) {
      if ((c = nodes.shift()) != null) {
        if (_isNode(c)) {
          parent.appendChild(c);
        } else if (c.jquery) {
          c.appendTo(parent);
        } else if ((_ref = typeof c) === 'string' || _ref === 'number') {
          parent.appendChild(document.createTextNode(c));
        } else if (_isArray(c)) {
          Array.prototype.unshift.apply(nodes, c);
        } else {
          E('renderNodes: unsupported child type = ' + c);
        }
      }
    }
    return parent;
  };

  _parseHAML = function(haml) {
    var m, v;
    if (m = /^(\w+)?(#([\w\-]+))*(\.[\w\.\-]+)?$/.exec(haml)) {
      return {
        tag: m[1] || 'div',
        id: v = m[3],
        className: (v = m[4]) ? v.slice(1).replace(/\./g, ' ') : ''
      };
    }
  };

  window.cell = cell = Backbone.View.extend();

  if (typeof define === 'function' && typeof require === 'function') {
    define('cell', [], exports = {
      pluginBuilder: 'cell-builder-plugin',
      load: function(name, req, load, config) {
        req([name], function(CDef) {
          var el, _ref;
          if (typeof CDef !== 'object') {
            E("Couldn't load " + name + " cell. cell definitions should be objects, but instead was " + (typeof CDef));
          } else {
            CDef.name = /(.*\/)?(.*)$/.exec(name)[2];
            if (!(((_ref = exports.__preinstalledCells__) != null ? _ref[name] : void 0) != null)) {
              el = document.createElement('link');
              el.href = req.toUrl("" + name + ".css");
              el.rel = 'stylesheet';
              el.type = 'text/css';
              jQuery('head')[0].appendChild(el);
            }
            if (typeof CDef["extends"] === 'string') {
              req(["cell!" + CDef["extends"]], function(parentCell) {
                if (parentCell.prototype.name) {
                  CDef["class"] = parentCell.prototype.name + (" " + CDef["class"]) || "";
                }
                load(parentCell.extend(CDef));
              });
            } else {
              load(cell.extend(CDef));
            }
          }
        });
      }
    });
    ({
      __: function() {
        var a, b, c, cell_options, children, el, haml, k, parent, v;
        a = arguments[0], b = arguments[1], children = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (a) {
          if (_isNode(b)) {
            children.unshift(b);
            b = void 0;
          }
          parent = (function() {
            if (typeof a === 'string') {
              if (haml = _parseHAML(a)) {
                el = document.createElement(haml.tag);
                if (haml.id) {
                  el.setAttribute('id', haml.id);
                }
                if (b != null) {
                  if (!_isObj(b)) {
                    children.unshift(b);
                  } else {
                    for (k in b) {
                      v = b[k];
                      if (k !== 'class') {
                        el.setAttribute(k, v);
                      } else {
                        el.className += v;
                      }
                    }
                  }
                }
                if (haml.className) {
                  el.className += el.className ? " " + haml.className : haml.className;
                }
                return el;
              } else {
                return E("renderParent: unsupported parent string = '" + a + "'");
              }
            } else if (a.prototype instanceof window.cell) {
              cell_options = typeof b === 'string' && (haml = _parseHAML(b)) ? _isObj(children[0]) ? ((c = children.shift()).id = haml.id, c["class"] = haml.className, c) : {
                id: haml.id,
                "class": haml.className
              } : _isObj(b) ? b : void 0;
              return (new a(cell_options)).el;
            } else if (_isNode(a)) {
              return a;
            } else {
              return E("renderParent: unsupported parent type = " + a);
            }
          })();
          return parent && _renderNodes(parent, children);
        }
      }
    });
    jQuery(document).ready(function() {
      _range.selectNode(document.body);
      jQuery('[data-cell]').each(function() {
        var baseurl, cachebust, cachebustAttr, cellname, opts,
          _this = this;
        if (cellname = this.getAttribute('data-cell')) {
          opts = {};
          cachebust = /(^\?cachebust)|(&cachebust)/.test(window.location.search);
          if (((cachebustAttr = this.getAttribute('data-cell-cachebust')) !== null || cachebust) && cachebustAttr !== 'false') {
            opts.urlArgs = "bust=" + (new Date().getTime());
          }
          if (baseurl = this.getAttribute('data-cell-baseurl')) {
            opts.baseUrl = baseurl;
          }
          require(opts, ["cell!" + cellname], function(CType) {
            jQuery(_this).append(new CType().el);
          });
        }
      });
    });
    return;
  }

}).call(this);
