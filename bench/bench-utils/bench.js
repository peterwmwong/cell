// Generated by CoffeeScript 1.6.1

define(function(require) {
  var Benchmark, escapeCode, platform;
  Benchmark = require('benchmark');
  platform = require('platform');
  escapeCode = function(str) {
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };
  return {
    run: function(_arg) {
      var name, s, setup, teardown, test, tests, _i, _len, _ref;
      setup = _arg.setup, tests = _arg.tests, teardown = _arg.teardown;
      if (setup) {
        Benchmark.prototype.setup = setup;
      }
      if (teardown) {
        Benchmark.prototype.teardown = teardown;
      }
      log('benchCode', "<pre>// Setup\n" + (escapeCode(setup)) + "</pre>");
      Benchmark.platform = platform;
      s = new Benchmark.Suite;
      s.on('cycle', function(event) {
        return log('bench', String(event.target));
      });
      s.on('complete', function() {
        var baseline, baselineName, desc, diff, hz, name, r, results, _i, _len, _ref, _ref1, _results;
        log('benchResultHeader', ' ');
        results = {};
        _ref = this[0], baseline = _ref.hz, baselineName = _ref.name;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          _ref1 = this[_i], name = _ref1.name, hz = _ref1.hz;
          r = results[name] = name !== baselineName ? parseInt(1000 * hz / baseline) : 1000;
          diff = r - 1000;
          desc = diff < 0 ? 'slower' : diff > 0 ? 'faster' : '';
          _results.push(log("benchResult " + desc, "" + name + " " + (Math.abs(diff / 10.0)) + "% " + desc));
        }
        return _results;
      });
      _ref = ['baseline', 'now'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        test = tests[name];
        s.add(name, test);
        log('benchCode', "<pre>// " + name + "<br>" + (escapeCode(test)) + "</pre>");
      }
      return s.run({
        async: true
      });
    }
  };
});
