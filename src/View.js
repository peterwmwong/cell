// Generated by CoffeeScript 1.4.0

define(['underscore', 'backbone', 'jquery'], function(_, Backbone, $) {
  var View, cidMap, isArrayish, origCleanData, __;
  isArrayish = function(o) {
    return (_.isArray(o)) || o.jquery;
  };
  cidMap = {};
  origCleanData = $.cleanData;
  $.cleanData = function(elems, acceptData) {
    var cell, cid, elem, i;
    i = 0;
    while (elem = elems[i++]) {
      origCleanData([elem], acceptData);
      if (cid = elem.cellcid) {
        cell = cidMap[cid];
        cell.$el = void 0;
        cell.remove();
      }
    }
  };
  __ = function(viewOrHAML, optionsOrFirstChild) {
    var children, k, m, options, parent, v;
    children = [].slice.call(arguments, optionsOrFirstChild && optionsOrFirstChild.constructor === Object ? (options = optionsOrFirstChild, 2) : 1);
    if (typeof viewOrHAML === 'string') {
      if (m = /^(\w+)?(#([\w\-]+))*(\.[\w\.\-]+)?$/.exec(viewOrHAML)) {
        parent = document.createElement(m[1] || 'div');
        if (m[3]) {
          parent.setAttribute('id', m[3]);
        }
        if (m[4]) {
          parent.className = m[4].slice(1).replace(/\./g, ' ');
        }
        for (k in options) {
          v = options[k];
          this._renderAttr(k, v, parent);
        }
      }
    } else if (viewOrHAML && viewOrHAML.prototype instanceof Backbone.View) {
      parent = (new viewOrHAML(options)).render().el;
    }
    if (parent) {
      this._renderChildren(children, parent);
      return parent;
    }
  };
  __["if"] = function(condition, thenElse) {
    var _name;
    return typeof thenElse[_name = condition ? 'then' : 'else'] === "function" ? thenElse[_name]() : void 0;
  };
  __.each = function(col, renderer) {
    var i, item, _i, _len, _results;
    if (col instanceof Backbone.Collection) {
      return col.map(renderer);
    } else {
      _results = [];
      for (i = _i = 0, _len = col.length; _i < _len; i = ++_i) {
        item = col[i];
        _results.push(renderer(item, i, col));
      }
      return _results;
    }
  };
  return View = Backbone.View.extend({
    _constructor: function() {
      this.__ = _.bind(this.__, this);
      this.__["if"] = View.prototype.__["if"];
      this.__.each = View.prototype.__.each;
    },
    constructor: function() {
      Backbone.View.apply(this, arguments);
      this._constructor();
    },
    _renderAttr: function(k, v, parent) {
      return parent.setAttribute(k, v);
    },
    _renderChild: function(n, parent, insertBeforeNode, rendered) {
      var _ref;
      if ((_ref = n.nodeType) === 1 || _ref === 3) {
        rendered.push(parent.insertBefore(n, insertBeforeNode));
      } else if (isArrayish(n)) {
        this._renderChildren(n, parent, insertBeforeNode, rendered);
      } else {
        rendered.push(parent.insertBefore(document.createTextNode(n), insertBeforeNode));
      }
    },
    _renderChildren: function(nodes, parent, insertBeforeNode, rendered) {
      var n, _i, _len;
      if (insertBeforeNode == null) {
        insertBeforeNode = null;
      }
      if (rendered == null) {
        rendered = [];
      }
      if (nodes == null) {
        return rendered;
      }
      if (!isArrayish(nodes)) {
        nodes = [nodes];
      }
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        n = nodes[_i];
        if (n != null) {
          this._renderChild(n, parent, insertBeforeNode, rendered);
        }
      }
      return rendered;
    },
    __: __,
    render: function() {
      this._renderChildren(this.renderEl(this.__), this.el);
      this.afterRender();
      return this;
    },
    remove: function() {
      delete cidMap[this.cid];
      this.el.cellcid = void 0;
      if (this.$el) {
        this.$el.remove();
      }
      this.stopListening();
      this.model = this.collection = this.el = this.$el = this.$ = void 0;
    },
    _setElement: Backbone.View.prototype.setElement,
    setElement: function(element, delegate) {
      this._setElement(element, delegate);
      cidMap[this.cid] = this;
      this.el.setAttribute('cell', this._cellName);
      this.el.cellcid = this.cid;
      return this;
    },
    renderEl: function() {},
    afterRender: function() {}
  });
});
