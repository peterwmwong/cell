// Generated by CoffeeScript 1.6.2
define(function() {
  var Cstack, absUrlRegex, configBaseUrl, fs, get, outcssfile, outcssfunc, path, put, quoteRegex, repathCSSRelativeURL, writeCount;

  if (!(typeof process !== "undefined" && process.versions && !!process.versions.node)) {
    throw new Error('!!! require.js optimizer must run in Node.js !!!');
  }
  fs = require.nodeRequire('fs');
  path = require.nodeRequire('path');
  get = function(url, callback) {
    if (path.existsSync(url) && fs.statSync(url).isFile()) {
      callback(void 0, fs.readFileSync(url, 'utf8'));
    } else {
      callback("Couldn't find file " + url);
    }
  };
  put = function(url, contents) {
    fs.writeFileSync(url, contents, 'utf8');
  };
  outcssfile = void 0;
  outcssfunc = void 0;
  configBaseUrl = void 0;
  Cstack = [];
  writeCount = 0;
  quoteRegex = /"|'/;
  absUrlRegex = /^(([A-z]+:\/\/)|\/)/;
  return {
    repathCSSRelativeURL: repathCSSRelativeURL = function(cssContents, cssFilePath, baseUrl) {
      var cssDir;

      cssDir = path.dirname(cssFilePath);
      return cssContents.replace(/:[ \t]*url\((.+?)\)/g, function(match, urlString) {
        urlString = urlString.trim();
        if (quoteRegex.test(urlString.charAt(0)) && quoteRegex.test(urlString.charAt(urlString.length - 1))) {
          urlString = urlString.slice(1, urlString.length - 1);
        }
        if (absUrlRegex.test(urlString)) {
          return match;
        } else {
          return ": url('" + (path.relative(baseUrl, path.join(cssDir, urlString))) + "')";
        }
      });
    },
    write: function(pName, mName, write) {
      var allcss, cssurl, name, preinstalls, _i, _len, _ref;

      ++writeCount;
      if (((outcssfile != null) || (outcssfunc != null)) && (Cstack.length > 0) && (Cstack.length === writeCount)) {
        allcss = '';
        preinstalls = {};
        for (_i = 0, _len = Cstack.length; _i < _len; _i++) {
          _ref = Cstack[_i], name = _ref.name, cssurl = _ref.cssurl;
          preinstalls[name] = 1;
          get(cssurl, function(err, contents) {
            if ((err == null) && typeof contents === 'string') {
              allcss += repathCSSRelativeURL(contents, cssurl, configBaseUrl);
            }
          });
        }
        write(";window.__installedViews = " + (JSON.stringify(preinstalls)) + ";");
        if (outcssfile != null) {
          put(outcssfile, allcss);
        }
        if (typeof outcssfunc === "function") {
          outcssfunc(allcss);
        }
      }
    },
    load: (function() {
      var moduleNameRegex;

      moduleNameRegex = /(.*\/)?(.*)/;
      return function(name, req, onLoad, config) {
        var match;

        configBaseUrl = config.baseUrl;
        if (typeof config.outcss === 'function') {
          outcssfunc = config.outcss;
        } else if (typeof config.outcss === 'string') {
          outcssfile = path.join(configBaseUrl, config.outcss);
        }
        if ((outcssfile == null) && (typeof (config != null ? config.out : void 0) === 'string') && (match = /(.*)\.\w*/.exec(config != null ? config.out : void 0)) && match[1]) {
          outcssfile = match[1] + '.css';
        }
        Cstack.push({
          name: name,
          cssurl: req.toUrl("" + name + ".css")
        });
        onLoad();
        req(['cell/View']);
        req([name]);
      };
    })()
  };
});

/*
//@ sourceMappingURL=defineView-builder-plugin.map
*/
