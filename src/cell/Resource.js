// Generated by CoffeeScript 1.6.2
define(['cell/Model', 'cell/Collection', 'cell/util/http', 'util/extend', 'util/type'], function(Model, Collection, http, extend, type) {
  var Resource, copyObj;

  copyObj = function(obj) {
    var k, newObj;

    newObj = {};
    if (obj) {
      for (k in obj) {
        newObj[k] = obj[k];
      }
    }
    return newObj;
  };
  Resource = function(url, _params) {
    this.url = url;
    this._params = _params;
  };
  Resource.prototype.defaultParams = function(params) {
    var k;

    for (k in this._params) {
      if (params[k] == null) {
        params[k] = this._params[k];
      }
    }
  };
  Resource.prototype.create = function(attrs) {
    return new Resource.Instance(this, attrs, true);
  };
  Resource.prototype.get = function(params, success, error) {
    var inst;

    inst = new Resource.Instance(this, void 0, false);
    params = copyObj(params);
    http({
      method: 'GET',
      url: this.genUrl(params, false)
    }, function(status, response, isSuccess) {
      var k, v, _ref;

      if (isSuccess) {
        _ref = JSON.parse(response);
        for (k in _ref) {
          v = _ref[k];
          inst.set(k, v);
        }
        if (typeof success === "function") {
          success();
        }
      } else {
        if (typeof error === "function") {
          error();
        }
      }
    });
    return inst;
  };
  Resource.prototype.query = function(params, success, error) {
    var inst;

    inst = new Resource.CollectionInstance(this);
    params = copyObj(params);
    http({
      method: 'GET',
      url: this.genUrl(params, false)
    }, function(status, response, isSuccess) {
      if (isSuccess) {
        inst.add(JSON.parse(response));
        if (typeof success === "function") {
          success();
        }
      } else {
        if (typeof error === "function") {
          error();
        }
      }
    });
    return inst;
  };
  Resource.Instance = Model.extend({
    constructor: function(_res, initialAttrs, _isNew) {
      this._res = _res;
      this._isNew = _isNew;
      Model.call(this, initialAttrs);
    },
    $delete: function(params, success, error) {
      if (!this._isNew) {
        params = copyObj(params);
        http({
          method: 'DELETE',
          url: this._res.genUrl(params, false)
        }, function(status, response, isSuccess) {
          if (isSuccess) {
            if (typeof success === "function") {
              success();
            }
          } else {
            if (typeof error === "function") {
              error();
            }
          }
        });
      }
    },
    $save: function(params, success, error) {
      var _this = this;

      params = copyObj(params);
      http({
        method: this._isNew ? 'POST' : 'PUT',
        url: this._res.genUrl(params, false),
        data: JSON.stringify(this._a)
      }, function(status, response, isSuccess) {
        var k, v, _ref;

        if (isSuccess) {
          _ref = JSON.parse(response);
          for (k in _ref) {
            v = _ref[k];
            _this.set(k, v);
          }
          _this._isNew = false;
          if (typeof success === "function") {
            success();
          }
        } else {
          if (typeof error === "function") {
            error();
          }
        }
      });
    }
  });
  Resource.CollectionInstance = Collection.extend({
    constructor: function(_res) {
      this._res = _res;
      Collection.call(this);
    },
    requery: function(params) {}
  });
  Resource.prototype.genUrl = function(params, disableQueryParams) {
    var delim, k, url, v;

    this.defaultParams(params);
    url = (url = this.url).replace(/{([A-z0-9]+)}/g, function(match, key, index) {
      var value;

      value = params[key];
      delete params[key];
      return encodeURIComponent(value);
    });
    if (!disableQueryParams) {
      delim = '?';
      for (k in params) {
        v = params[k];
        if (!(v)) {
          continue;
        }
        url += "" + delim + (encodeURIComponent(k)) + "=" + (encodeURIComponent(v));
        delim = '&';
      }
    }
    return url;
  };
  return Resource;
});

/*
//@ sourceMappingURL=Resource.map
*/
