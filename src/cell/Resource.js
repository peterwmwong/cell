// Generated by CoffeeScript 1.6.2
define(['cell/Model', 'cell/Collection', 'cell/util/http', 'util/extend', 'util/type'], function(Model, Collection, http, extend, type) {
  var Resource, copyObj;

  copyObj = function(obj) {
    var k, newObj;

    newObj = {};
    for (k in obj) {
      newObj[k] = obj[k];
    }
    return newObj;
  };
  Resource = function(url, _params) {
    this.url = url;
    this._params = _params;
  };
  Resource.prototype.defaultParams = function(params) {
    var k;

    for (k in this._params) {
      params[k] = this._params[k];
    }
  };
  Resource.prototype.create = function(params) {
    var inst;

    inst = new Resource.Instance();
    params = copyObj(params);
    http({
      method: 'POST',
      url: this.genUrl(params, true),
      data: JSON.stringify(params)
    }, function(status, response) {
      var k, v, _ref;

      _ref = JSON.parse(response);
      for (k in _ref) {
        v = _ref[k];
        inst.set(k, v);
      }
    });
    return inst;
  };
  Resource.prototype.get = function(params) {
    var inst;

    inst = new Resource.Instance();
    params = copyObj(params);
    http({
      method: 'GET',
      url: this.genUrl(params, false)
    }, function(status, response) {
      var k, v, _ref;

      _ref = JSON.parse(response);
      for (k in _ref) {
        v = _ref[k];
        inst.set(k, v);
      }
    });
    return inst;
  };
  Resource.prototype.query = function(params) {
    var inst;

    inst = new Resource.CollectionInstance();
    params = copyObj(params);
    http({
      method: 'GET',
      url: this.genUrl(params, false)
    }, function(status, response) {
      inst.add(JSON.parse(response));
    });
    return inst;
  };
  Resource.Instance = Model.extend({
    "delete": function(params) {},
    save: function(params) {}
  });
  Resource.CollectionInstance = Collection.extend({
    requery: function(params) {}
  });
  Resource.prototype.genUrl = function(params, disableQueryParams) {
    var delim, k, url, v;

    this.defaultParams(params);
    url = (url = this.url).replace(/{([A-z0-9]+)}/g, function(match, key, index) {
      var value;

      value = params[key];
      delete params[key];
      return encodeURIComponent(value);
    });
    if (!disableQueryParams) {
      delim = '?';
      for (k in params) {
        v = params[k];
        if (!(v)) {
          continue;
        }
        url += "" + delim + (encodeURIComponent(k)) + "=" + (encodeURIComponent(v));
        delim = '&';
      }
    }
    return url;
  };
  return Resource;
});

/*
//@ sourceMappingURL=Resource.map
*/
