// Generated by CoffeeScript 1.4.0

define(['cell/Events', 'util/type', 'cell/Model'], function(Events, type, Model) {
  var iter;
  iter = function(str, before, after) {
    return Function.call(void 0, 'f', 'c', 'd', "if(f==null){return}" + ("var i=-1,t=this,l=t.length(),e" + (before || '') + ";") + "while(++i<l){" + "e=t._i[i];" + str + "}" + (after || ''));
  };
  return Events.extend({
    constructor: function(array) {
      this._i = [];
      this.add(array);
    },
    readOnly: function() {
      this._ro = true;
    },
    model: Model,
    at: function(index) {
      return this._i[index];
    },
    length: function() {
      return this._i.length;
    },
    indexOf: Array.prototype.indexOf ? function(model) {
      return this._i.indexOf(model);
    } : iter('if(e===f){return i}', '', 'return -1'),
    toArray: function() {
      return this._i.slice();
    },
    each: iter('if(f.call(c,e,i,t)===!1){i=l}'),
    map: iter('r.push(f.call(c,e,i,t))', ',r=[]', 'return r'),
    reduce: iter('f=c.call(d,f,e,i,t);', '', 'return f'),
    add: function(models, index) {
      var i, len;
      if (models && !this._ro) {
        if (!type.isA(models)) {
          models = [models];
        }
        i = -1;
        len = models.length;
        if (index == null) {
          index = this.length();
        }
        while (++i < len) {
          this._i.splice(index++, 0, this._toM(models[i]));
        }
      }
    },
    remove: function(models) {
      var i, index, len;
      if (models && !this._ro) {
        if (!type.isA(models)) {
          models = [models];
        }
        i = -1;
        len = models.length;
        while (++i < len) {
          if ((index = this.indexOf(models[i])) > -1) {
            this._i.splice(index, 1);
          }
        }
      }
    },
    _toM: function(o) {
      if (o instanceof this.model) {
        return o;
      } else {
        return new Model(o);
      }
    }
  });
});
