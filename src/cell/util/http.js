// Generated by CoffeeScript 1.6.2
define(function() {
  var DEFAULT_PROTOCOL, SIMPLE_HEADERS, URL_MATCH, http;

  SIMPLE_HEADERS = ["Cache-Control", "Content-Language", "Content-Type", "Expires", "Last-Modified", "Pragma"];
  URL_MATCH = /^([^:]+):\/\/(\w+:{0,1}\w*@)?(\{?[\w\.-]*\}?)(:([0-9]+))?(\/[^\?#]*)?(\?([^#]*))?(#(.*))?$/;
  DEFAULT_PROTOCOL = window.location.protocol.replace(':', '');
  http = function(opts, callback) {
    var completeRequest, key, status, value, xhr, _ref;

    completeRequest = function(status, response, headersString) {
      var protocol, _ref;

      protocol = ((_ref = opts.url.match(URL_MATCH)) != null ? _ref[1] : void 0) || DEFAULT_PROTOCOL;
      if (protocol === "file") {
        status = response ? 200 : 404;
      } else if (status === 1223) {
        status = 204;
      }
      return callback(status, response, headersString);
    };
    xhr = new http.XHR();
    xhr.open(opts.method, opts.url, true);
    _ref = opts.headers;
    for (key in _ref) {
      value = _ref[key];
      if (value) {
        xhr.setRequestHeader(key, value);
      }
    }
    status = void 0;
    xhr.onreadystatechange = function() {
      var header, responseHeaders, _i, _len;

      if (xhr.readyState === 4) {
        if (!(responseHeaders = xhr.getAllResponseHeaders())) {
          responseHeaders = "";
          for (_i = 0, _len = SIMPLE_HEADERS.length; _i < _len; _i++) {
            header = SIMPLE_HEADERS[_i];
            if ((value = xhr.getResponseHeader(header))) {
              responseHeaders += header + ": " + value + "\n";
            }
          }
        }
        return completeRequest(status || xhr.status, xhr.responseType ? xhr.response : xhr.responseText, responseHeaders);
      }
    };
    if (opts.withCredentials) {
      xhr.withCredentials = true;
    }
    if (opts.responseType) {
      xhr.responseType = opts.responseType;
    }
    xhr.send(opts.data || "");
    if (opts.timeout > 0) {
      return setTimeout((function() {
        status = -1;
        return xhr.abort();
      }), opts.timeout);
    }
  };
  http.XHR = window.XMLHttpRequest || (function() {
    var ActiveXObjectId, func, ids;

    func = function() {
      return new ActiveXObject(ActiveXObjectId);
    };
    ids = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP"];
    while (ActiveXObjectId = ids.pop()) {
      try {
        func();
        return func;
      } catch (_error) {}
    }
    throw new Error("XMLHttpRequest not supported");
  })();
  return http;
});

/*
//@ sourceMappingURL=http.map
*/
