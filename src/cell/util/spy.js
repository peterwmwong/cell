// Generated by CoffeeScript 1.4.0

define(['util/hash'], function(hash) {
  var allChanges, doAfter, log, onChange, onChangeCalled, _onChange;
  log = false;
  doAfter = window.requestAnimationFrame || function(f) {
    return setTimeout(f, 0);
  };
  onChangeCalled = false;
  allChanges = {};
  _onChange = function() {
    var changes, key;
    onChangeCalled = false;
    changes = allChanges;
    allChanges = {};
    for (key in changes) {
      changes[key].f(changes[key].e());
    }
  };
  onChange = function() {
    allChanges[hash(this)] = this;
    if (!onChangeCalled) {
      onChangeCalled = true;
      doAfter(_onChange);
    }
  };
  return {
    addCol: function() {
      if (log) {
        log.c[hash(this)] = this;
      }
    },
    addModel: function(key) {
      var entry, hashkey, k, obj, _ref;
      if (log) {
        _ref = {
          m: this,
          d: this.collection
        };
        for (k in _ref) {
          obj = _ref[k];
          if (!(obj)) {
            continue;
          }
          if (!(entry = log[k][hashkey = hash(obj)])) {
            entry = log[k][hashkey] = {
              m: obj,
              p: {}
            };
          }
          entry.p[key] = 1;
        }
      }
    },
    watch: function(e, f) {
      var accesslog, c, context, logs, m, p, props, value, _, _ref, _ref1;
      context = {
        e: e,
        f: f
      };
      log = {
        m: {},
        c: {},
        d: {}
      };
      try {
        value = e();
      } catch (_error) {}
      accesslog = log;
      log = false;
      _ref = {
        0: accesslog.m,
        1: accesslog.d
      };
      for (_ in _ref) {
        logs = _ref[_];
        for (_ in logs) {
          m = logs[_];
          if ((props = m.p)[void 0]) {
            m.m.on('all', onChange, context);
          } else {
            for (p in props) {
              m.m.on("change:" + p, onChange, context);
            }
          }
        }
      }
      _ref1 = accesslog.c;
      for (_ in _ref1) {
        c = _ref1[_];
        c.on('add', onChange, context);
        c.on('remove', onChange, context);
      }
      f(value);
    }
  };
});
