// Generated by CoffeeScript 1.6.2
define(['util/hash', 'util/fn', 'util/type', 'util/defer'], function(hash, fn, type, defer) {
  var Scope, allChanges, evaluateAndMonitor, logStack, onChange, onChangeCalled, prevScope, scope, watches, _onChange;

  logStack = [];
  onChangeCalled = false;
  prevScope = scope = void 0;
  allChanges = {};
  watches = {};
  _onChange = function() {
    var changes, key;

    onChangeCalled = false;
    changes = allChanges;
    allChanges = {};
    for (key in changes) {
      evaluateAndMonitor(changes[key]);
    }
  };
  onChange = function() {
    allChanges[this.$$hashkey || hash(this)] = this;
    if (!onChangeCalled) {
      onChangeCalled = true;
      defer(_onChange);
    }
  };
  Scope = function() {
    this.sig = '';
    this.log = {};
    this.col = {};
  };
  return {
    _eam: evaluateAndMonitor = function(context) {
      var eventKey, suspendedScope, value;

      suspendedScope = scope;
      prevScope = context.scope;
      scope = new Scope();
      value = context.e();
      if (scope.sig !== prevScope.sig) {
        for (eventKey in prevScope.log) {
          if (scope.log[eventKey]) {
            delete scope.log[eventKey];
          } else {
            prevScope.log[eventKey].o.off(prevScope.log[eventKey].e, void 0, context);
          }
        }
        for (eventKey in scope.log) {
          scope.log[eventKey].o.on(scope.log[eventKey].e, onChange, context);
        }
        context.scope = scope;
      }
      scope = suspendedScope;
      context.f(value);
    },
    addCol: function() {
      var key;

      if (scope && !scope.col[key = this.$$hashkey]) {
        scope.sig += key;
        scope.col[key] = true;
        if (!prevScope.col[key]) {
          scope.log['add' + key] = {
            o: this,
            e: 'add'
          };
          scope.log['remove' + key] = {
            o: this,
            e: 'remove'
          };
        }
      }
    },
    addModel: function(event) {
      var eventKey, key, obj;

      if (scope) {
        eventKey = event + ((obj = this.collection) && scope.col[key = obj.$$hashkey] ? key : (obj = this, this.$$hashkey));
        if (!scope.log[eventKey]) {
          scope.sig += eventKey;
          scope.log[eventKey] = {
            o: obj,
            e: event
          };
        }
      }
    },
    suspendWatch: function(f) {
      var suspendedScope;

      suspendedScope = scope;
      scope = void 0;
      try {
        f();
      } catch (_error) {}
      scope = suspendedScope;
    },
    unwatch: function(key) {
      var context, i, w;

      if (w = watches[key = hash(key)]) {
        delete watches[key];
        i = 0;
        while ((context = w[i++])) {
          for (key in context.scope.log) {
            context.scope.log[key].o.off(void 0, void 0, context);
          }
        }
      }
    },
    watch: function(keyObj, e, f, callContext) {
      var context, key;

      callContext || (callContext = keyObj);
      if (!type.isF(e)) {
        f.call(callContext, e);
      } else {
        (watches[key = hash(keyObj)] || (watches[key] = [])).push(context = {
          e: fn.b0(e, keyObj),
          f: fn.b1(f, callContext),
          scope: new Scope()
        });
        evaluateAndMonitor(context);
        return context;
      }
    }
  };
});

/*
//@ sourceMappingURL=spy.map
*/
