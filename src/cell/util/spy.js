// Generated by CoffeeScript 1.4.0

define(['util/hash'], function(hash) {
  var log;
  log = false;
  return {
    addCol: function() {
      if (log) {
        log.c[hash(this)] = this;
      }
    },
    addModel: function(key) {
      var entry, hashkey, k, obj, _ref;
      if (log) {
        _ref = {
          m: this,
          d: this.collection
        };
        for (k in _ref) {
          obj = _ref[k];
          if (!(obj)) {
            continue;
          }
          if (!(entry = log[k][hashkey = hash(obj)])) {
            entry = log[k][hashkey] = {
              m: obj,
              p: {}
            };
          }
          entry.p[key] = 1;
        }
      }
    },
    watch: function(expr, cb) {
      var accesslog, c, called, logs, m, onChange, p, props, value, _, _ref, _ref1;
      log = {
        m: {},
        c: {},
        d: {}
      };
      try {
        value = expr();
      } catch (_error) {}
      accesslog = log;
      log = false;
      called = false;
      onChange = function() {
        if (!called) {
          called = true;
          setTimeout((function() {
            called = false;
            try {
              cb(expr());
            } catch (_error) {}
          }), 0);
        }
      };
      _ref = {
        0: accesslog.m,
        1: accesslog.d
      };
      for (_ in _ref) {
        logs = _ref[_];
        for (_ in logs) {
          m = logs[_];
          if ((props = m.p)[void 0]) {
            m.m.on('all', onChange);
          } else {
            for (p in props) {
              m.m.on("change:" + p, onChange);
            }
          }
        }
      }
      _ref1 = accesslog.c;
      for (_ in _ref1) {
        c = _ref1[_];
        c.on('add', onChange);
        c.on('remove', onChange);
      }
      cb(value);
    }
  };
});
