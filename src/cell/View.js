// Generated by CoffeeScript 1.4.0

define(['util/hash', 'util/type', 'dom/data', 'dom/events', 'cell/Model', 'cell/Collection', 'cell/util/spy'], function(hash, _arg, data, events, Model, Collection, _arg1) {
  var Bind, EachBind, HashQueue, IfBind, View, bind, d, isA, isF, noop, render, watch, __;
  isA = _arg.isA, isF = _arg.isF;
  watch = _arg1.watch;
  bind = function(f, o) {
    return function() {
      return f.call(o);
    };
  };
  noop = function() {};
  d = document;
  render = function(parent, view, renderValue, prevNodes) {
    var i, len, newNodes;
    if (renderValue == null) {
      renderValue = [d.createTextNode('')];
    }
    newNodes = view._renderChildren(renderValue, parent, prevNodes[0]);
    i = -1;
    len = prevNodes.length;
    while (++i < len) {
      parent.removeChild(prevNodes[i]);
    }
    return newNodes;
  };
  Bind = function(view, expr) {
    this.r = function(parent) {
      var nodes;
      nodes = [];
      watch(bind(expr, view), function(renderValue) {
        nodes = render(parent, view, renderValue, nodes);
      });
    };
  };
  IfBind = function(view, cond, thnElse) {
    this.r = function(parent) {
      var nodes;
      nodes = [];
      watch(bind(cond, view), function(condValue) {
        nodes = render(parent, view, condValue ? typeof thnElse.then === "function" ? thnElse.then() : void 0 : typeof thnElse["else"] === "function" ? thnElse["else"]() : void 0, nodes);
      });
    };
  };
  HashQueue = function() {
    this.h = {};
  };
  HashQueue.prototype = {
    push: function(key, val) {
      var entry, _base;
      entry = ((_base = this.h)[key] || (_base[key] = []));
      entry.push(val);
    },
    shift: function(key) {
      var entry;
      if (entry = this.h[key]) {
        if (entry.lengh === 1) {
          delete this.h[key];
          return entry[0];
        } else {
          return entry.shift();
        }
      }
    }
  };
  EachBind = function(view, expr, itemRenderer) {
    var itemhash;
    itemhash = new HashQueue;
    this.r = function(parent) {
      watch(bind(expr, view), function(value) {
        var i, item, items, key, len, newEls, newItemHash, prevItemEl, _ref;
        newEls = [];
        newItemHash = new HashQueue;
        i = -1;
        len = value.length;
        while (++i < len) {
          if (!(prevItemEl = itemhash.shift(key = hash(item = value[i])))) {
            prevItemEl = itemRenderer.prototype instanceof View ? new itemRenderer({
              model: item
            }).el : itemRenderer(item);
          }
          newItemHash.push(key, prevItemEl);
          newEls.push(prevItemEl);
        }
        _ref = itemhash.h;
        for (key in _ref) {
          items = _ref[key];
          i = -1;
          len = items.length;
          while (++i < len) {
            parent.removeChild(items[i]);
          }
        }
        itemhash = newItemHash;
        i = -1;
        len = newEls.length;
        while (++i < len) {
          parent.appendChild(newEls[i]);
        }
      });
    };
  };
  EachBind.prototype.constructor = IfBind.prototype.constructor = Bind;
  __ = function(viewOrHAML, optionsOrFirstChild) {
    var children, k, m, match, options, parent, v;
    children = [].slice.call(arguments, optionsOrFirstChild && optionsOrFirstChild.constructor === Object ? (options = optionsOrFirstChild, 2) : 1);
    if (typeof viewOrHAML === 'string') {
      if (m = /^(\w+)?(#([\w\-]+))?(\.[\w\.\-]+)?$/.exec(viewOrHAML)) {
        parent = d.createElement(m[1] || 'div');
        if (m[3]) {
          parent.setAttribute('id', m[3]);
        }
        if (m[4]) {
          parent.className = m[4].slice(1).replace(/\./g, ' ');
        }
        for (k in options) {
          v = options[k];
          if (match = /^on(\w+)/.exec(k)) {
            events.on(parent, match[1], v, this);
          } else {
            this._renderAttr(k, v, parent);
          }
        }
      }
    } else if (viewOrHAML && viewOrHAML.prototype instanceof View) {
      parent = new viewOrHAML(options).el;
    }
    if (parent) {
      this._renderChildren(children, parent);
      return parent;
    }
  };
  __["if"] = function(condition, thenElse) {
    var _name;
    if (isF(condition)) {
      return new IfBind(this.view, condition, thenElse);
    } else {
      return typeof thenElse[_name = condition ? 'then' : 'else'] === "function" ? thenElse[_name]() : void 0;
    }
  };
  __.each = function(col, renderer) {
    var collection, i, length, results;
    if (col) {
      if (col instanceof Collection) {
        debugger;
        collection = col;
        col = function() {
          return collection.toArray();
        };
      }
      if (isF(col)) {
        return new EachBind(this.view, col, renderer);
      } else {
        length = col.length;
        i = -1;
        results = [];
        while (++i < length) {
          results.push((renderer.prototype instanceof View ? new renderer({
            model: col[i]
          }).el : renderer(col[i], i, col)));
        }
        return results;
      }
    }
  };
  return View = Model.extend({
    constructor: function(options) {
      var _,
        _this = this;
      this.options = options != null ? options : {};
      this.model = this.options.model;
      delete this.options.model;
      this.collection = this.options.collection;
      delete this.options.collection;
      __ = View.prototype.__;
      _ = this.__ = function() {
        return __.apply(_this, arguments);
      };
      _["if"] = __["if"];
      _.each = __.each;
      _.view = this;
      this._render_el();
    },
    beforeRender: noop,
    render_el: function() {
      return d.createElement('div');
    },
    render: noop,
    afterRender: noop,
    __: __,
    _render_el: function() {
      var cls;
      this.beforeRender();
      this.el = this.render_el(this.__);
      this.el.className = (cls = this.el.className) ? cls + ' ' + this._cellName : this._cellName;
      data.set(this.el, 'cellRef', this);
      this.el.setAttribute('cell', this._cellName);
      this._renderChildren(this.render(this.__), this.el);
      this.afterRender();
    },
    _renderAttr: function(k, v, parent) {
      if (isF(v)) {
        watch(bind(v, this), function(value) {
          parent.setAttribute(k, value);
        });
      } else {
        parent.setAttribute(k, v);
      }
    },
    _renderChild: function(n, parent, insertBeforeNode, rendered) {
      var _ref;
      if (isF(n)) {
        n = new Bind(this, n);
      }
      debugger;
      if (n.constructor === Bind) {
        n.r(parent);
      } else if ((_ref = n.nodeType) === 1 || _ref === 3) {
        rendered.push(parent.insertBefore(n, insertBeforeNode));
      } else if (isA(n)) {
        this._renderChildren(n, parent, insertBeforeNode, rendered);
      } else {
        rendered.push(parent.insertBefore(d.createTextNode(n), insertBeforeNode));
      }
    },
    _renderChildren: function(nodes, parent, insertBeforeNode, rendered) {
      var n, _i, _len;
      if (insertBeforeNode == null) {
        insertBeforeNode = null;
      }
      if (rendered == null) {
        rendered = [];
      }
      if (nodes == null) {
        return rendered;
      }
      if (!isA(nodes)) {
        nodes = [nodes];
      }
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        n = nodes[_i];
        if (n != null) {
          this._renderChild(n, parent, insertBeforeNode, rendered);
        }
      }
      return rendered;
    }
  });
});
