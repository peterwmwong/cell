// Generated by CoffeeScript 1.4.0
var __slice = [].slice;

define(['utils'], function(utils) {
  var Model;
  Model = function(_a) {
    this._a = _a != null ? _a : {};
    this._e = {
      any: []
    };
  };
  Model.prototype = {
    get: function(key) {
      return this._a[key];
    },
    set: function(key, value) {
      var old_value;
      if ((utils.isS(key)) && (this._a[key] !== value)) {
        old_value = this._a[key];
        this.trigger("change:" + key, (this._a[key] = value), old_value);
        return true;
      }
    },
    on: function(type, fn, ctx) {
      var _base;
      if ((utils.isS(type)) && (utils.isF(fn))) {
        ((_base = this._e)[type] || (_base[type] = [])).push([fn, ctx]);
        return true;
      }
    },
    off: function(type, fn, ctx) {
      var events, eventsHash;
      eventsHash = type != null ? {
        type: this._e[type]
      } : this._e;
      if (fn != null) {
        if (ctx == null) {
          ctx = 0;
        }
      } else if (ctx != null) {
        fn = ctx;
        ctx = 1;
      } else {
        return;
      }
      for (type in eventsHash) {
        if (events = eventsHash[type]) {
          utils.ev.rm(events, fn, ctx);
        }
      }
    },
    trigger: function() {
      var allHandlers, args, h, i, type;
      type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      allHandlers = this._e['any'].concat(this._e[type] || []);
      if (i = allHandlers.length) {
        while (i--) {
          h = allHandlers[i];
          h[0].apply(h[1], [type].concat(args));
        }
      }
    },
    onChangeAndDo: function(key, cb, ctx) {
      if (this.on("change:" + key, cb, ctx)) {
        cb("initial:" + key, this.get(key));
      }
    }
  };
  return Model;
});
