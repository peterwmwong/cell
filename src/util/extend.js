// Generated by CoffeeScript 1.6.1
var __slice = [].slice;

define(function() {
  var constrProp, protoProp;
  constrProp = 'constructor';
  protoProp = 'prototype';
  return function(proto) {
    var Child, Parent, Surrogate, k;
    Parent = this;
    Child = function() {
      var options;
      options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!(this instanceof Child)) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Child, options, function(){});
      }
      Parent.apply(this, options);
      if (proto && proto[constrProp]) {
        proto[constrProp].apply(this, options);
      }
    };
    Child.extend = Parent.extend;
    Surrogate = function() {};
    Surrogate[protoProp] = Parent[protoProp];
    Child[protoProp] = new Surrogate();
    if (proto) {
      for (k in proto) {
        Child[protoProp][k] = proto[k];
      }
      if (proto[constrProp]) {
        Child[protoProp][constrProp] = proto[constrProp];
      }
    }
    return Child;
  };
});
