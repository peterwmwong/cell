// Generated by CoffeeScript 1.6.3
define(function() {
  var FILE_URL_MATCH, SIMPLE_HEADERS, http;
  SIMPLE_HEADERS = ["Cache-Control", "Content-Language", "Content-Type", "Expires", "Last-Modified", "Pragma"];
  FILE_URL_MATCH = /^file:\/\/(\w+:{0,1}\w*@)?(\{?[\w\.-]*\}?)(:([0-9]+))?(\/[^\?#]*)?(\?([^#]*))?(#(.*))?$/;
  http = function(opts, callback) {
    var completeRequest, key, status, value, xhr, _ref;
    completeRequest = function(status, response) {
      if (FILE_URL_MATCH.test(opts.url)) {
        status = response ? 200 : 404;
      } else if (status === 1223) {
        status = 204;
      }
      return callback(status, response, (200 <= status && status < 300));
    };
    xhr = new http.XHR();
    xhr.open(opts.method, opts.url, true);
    _ref = opts.headers;
    for (key in _ref) {
      value = _ref[key];
      if (value) {
        xhr.setRequestHeader(key, value);
      }
    }
    status = void 0;
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {
        return completeRequest(status || xhr.status, xhr.responseType ? xhr.response : xhr.responseText);
      }
    };
    if (opts.withCredentials) {
      xhr.withCredentials = true;
    }
    if (opts.responseType) {
      xhr.responseType = opts.responseType;
    }
    xhr.send(opts.data || "");
    if (opts.timeout > 0) {
      return setTimeout((function() {
        status = -1;
        return xhr.abort();
      }), opts.timeout);
    }
  };
  http.XHR = window.XMLHttpRequest || (function() {
    var ActiveXObjectId, func, ids;
    func = function() {
      return new ActiveXObject(ActiveXObjectId);
    };
    ids = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP"];
    while (ActiveXObjectId = ids.pop()) {
      try {
        func();
        return func;
      } catch (_error) {}
    }
    throw new Error("XMLHttpRequest not supported");
  })();
  return http;
});

/*
//@ sourceMappingURL=http.map
*/
