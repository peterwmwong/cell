// Generated by CoffeeScript 1.3.1
(function() {
  var $, E, cell, doc, exports, window, __, _isObj, _parseHAML, _range, _renderNodes,
    __slice = [].slice;

  E = typeof (typeof console !== "undefined" && console !== null ? console.error : void 0) === 'function' ? (function() {
    var msg;
    msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.error.apply(console, msg);
  }) : function() {};

  window = this;

  $ = window.$;

  doc = window.document || {
    createElement: function() {}
  };

  _isObj = function(o) {
    return (o != null ? o.constructor : void 0) === Object;
  };

  _range = doc.createRange();

  _renderNodes = function(parent, nodes) {
    var c, _ref;
    while (nodes.length > 0) {
      if ((c = nodes.shift()) != null) {
        if (_.isElement(c)) {
          parent.appendChild(c);
        } else if (c.jquery) {
          c.appendTo(parent);
        } else if ((_ref = typeof c) === 'string' || _ref === 'number') {
          parent.appendChild(doc.createTextNode(c));
        } else if (_.isArray(c)) {
          Array.prototype.unshift.apply(nodes, c);
        } else {
          E("__: unsupported render child " + c);
        }
      }
    }
    return parent;
  };

  _parseHAML = function(haml) {
    var m, v;
    if (m = /^(\w+)?(#([\w\-]+))*(\.[\w\.\-]+)?$/.exec(haml)) {
      return {
        tag: m[1] || 'div',
        id: v = m[3],
        className: (v = m[4]) ? v.slice(1).replace(/\./g, ' ') : ''
      };
    }
  };

  __ = function() {
    var a, b, c, cell_options, children, el, haml, k, parent, v;
    a = arguments[0], b = arguments[1], children = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (a) {
      if (_.isElement(b)) {
        children.unshift(b);
        b = void 0;
      }
      parent = (function() {
        if (typeof a === 'string') {
          if (haml = _parseHAML(a)) {
            el = doc.createElement(haml.tag);
            if (haml.id) {
              el.setAttribute('id', haml.id);
            }
            if (b != null) {
              if (!_isObj(b)) {
                children.unshift(b);
              } else {
                for (k in b) {
                  v = b[k];
                  if (k !== 'class') {
                    el.setAttribute(k, v);
                  } else {
                    el.className += v;
                  }
                }
              }
            }
            if (haml.className) {
              el.className += el.className ? " " + haml.className : haml.className;
            }
            return el;
          } else {
            return E("__(): unsupported argument '" + a + "'");
          }
        } else if (a.prototype instanceof window.cell) {
          cell_options = typeof b === 'string' && (haml = _parseHAML(b)) ? _isObj(children[0]) ? ((c = children.shift()).id = haml.id, c.className = haml.className, c) : {
            id: haml.id,
            className: haml.className
          } : _isObj(b) ? b : void 0;
          if (cell_options) {
            cell_options.className = cell_options.className ? "" + a.prototype.className + " " + cell_options.className : a.prototype.className;
          }
          return (new a(cell_options)).el;
        } else if (_.isElement(a)) {
          return a;
        } else {
          return E("__(): unsupported argument " + a);
        }
      })();
      return parent && _renderNodes(parent, children);
    }
  };

  window.cell = cell = Backbone.View.extend({
    __: __,
    render: function() {
      var child, children, _i, _len;
      this.el.innerHTML = '';
      if (_.isArray(children = this.render_el(__))) {
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          this.el.appendChild(child);
        }
      }
      this.after_render();
      return this;
    }
  });

  if (typeof define === 'function' && typeof require === 'function') {
    define('cell', [], exports = {
      pluginBuilder: 'cell-builder-plugin',
      load: function(name, req, load, config) {
        req([name], function(CDef) {
          var el, _ref;
          if (typeof CDef !== 'object') {
            E("cell!: Couldn't load " + name + " cell. cell definitions should be objects, but instead was " + (typeof CDef));
          } else {
            CDef.name = /(.*\/)?(.*)$/.exec(name)[2];
            if (!(((_ref = exports.__preinstalledCells__) != null ? _ref[name] : void 0) != null)) {
              el = doc.createElement('link');
              el.href = req.toUrl("" + name + ".css");
              el.rel = 'stylesheet';
              el.type = 'text/css';
              $('head')[0].appendChild(el);
            }
            CDef.className = CDef.name;
            CDef.render_el || (CDef.render_el = $.noop);
            CDef.after_render || (CDef.after_render = $.noop);
            load(cell.extend(CDef));
          }
        });
      },
      __: __
    });
    $(doc).ready(function() {
      _range.selectNode(doc.body);
      $('[data-cell]').each(function() {
        var cellname,
          _this = this;
        if (cellname = this.getAttribute('data-cell')) {
          require(["cell!" + cellname], function(CType) {
            _this.appendChild(new CType().render().el);
          });
        }
      });
    });
    return;
  }

}).call(this);
