// Generated by CoffeeScript 1.3.3

define(function(require) {
  var $, Backbone, cidToCell, exp, origCleanData, pic;
  Backbone = require('backbone');
  $ = require('jquery');
  $(function() {
    $('[data-cell]').each(function(i, el) {
      var cellname;
      if (cellname = this.getAttribute('data-cell')) {
        require(["cell!" + cellname], function(CType) {
          el.appendChild(new CType().render().el);
        });
      }
    });
  });
  cidToCell = {};
  origCleanData = $.cleanData;
  $.cleanData = function(elems, acceptData) {
    var cid, elem, i;
    origCleanData(elems, acceptData);
    i = 0;
    while ((elem = elems[i++])) {
      if ((cid = elem.getAttribute('cell_cid'))) {
        cidToCell[cid].dispose();
      }
    }
  };
  pic = void 0;
  return exp = {
    Cell: Backbone.View.extend({
      dispose: function() {
        var _ref, _ref1;
        delete cidToCell[this.cid];
        if ((_ref = this.model) != null) {
          _ref.off(null, null, this);
        }
        if ((_ref1 = this.collection) != null) {
          _ref1.off(null, null, this);
        }
        this.undelegateEvents();
        return this.model = this.collection = this.el = this.$el = this.$ = void 0;
      },
      setElement: function(element, delegate) {
        Backbone.View.prototype.setElement.call(this, element, delegate);
        cidToCell[this.cid] = this;
        this.el.setAttribute('cell', this.name);
        this.el.setAttribute('cell_cid', this.cid);
        return this;
      },
      render: function() {
        this.render_el && (this.el.innerHTML = this.render_el());
        if (typeof this.after_render === "function") {
          this.after_render();
        }
        return this;
      }
    }),
    pluginBuilder: 'cell-builder-plugin',
    load: function(name, req, load, config) {
      req([name], function(def) {
        var el;
        if (def !== Object(def)) {
          throw "Couldn't load " + name + " cell";
        }
        pic || (pic = (exp.__preinstalledCells__ || (exp.__preinstalledCells__ = {})));
        if (!pic[name]) {
          pic[name] = true;
          el = document.createElement('link');
          el.href = req.toUrl("" + name + ".css");
          el.rel = 'stylesheet';
          el.type = 'text/css';
          $('head').append(el);
        }
        def.className = def.name = /(.*\/)?(.*)$/.exec(name)[2];
        def.render_el || (def.render_el = $.noop);
        def.after_render || (def.after_render = $.noop);
        load(exp.Cell.extend(def));
      });
    }
  };
});
