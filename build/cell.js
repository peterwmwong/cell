// Generated by CoffeeScript 1.4.0

define(['backbone', 'jquery'], function(Backbone, $) {
  var AttrBind, Bind, IfBind, cidMap, isArrayish, isBind, module, origCleanData, __, __each, __if;
  isArrayish = typeof Zepto === 'function' ? function(o) {
    return (_.isArray(o)) || (Zepto.fn.isPrototypeOf(o));
  } : function(o) {
    return (_.isArray(o)) || o.jquery;
  };
  isBind = _.isFunction;
  cidMap = {};
  origCleanData = $.cleanData;
  $.cleanData = function(elems, acceptData) {
    var cell, cid, elem, i;
    i = 0;
    while (elem = elems[i++]) {
      origCleanData([elem], acceptData);
      if (cid = elem.cellcid) {
        cell = cidMap[cid];
        cell.$el = void 0;
        cell.remove();
      }
    }
  };
  __ = function(viewOrHAML, optionsOrFirstChild) {
    var bind, children, k, m, options, parent, v;
    children = [].slice.call(arguments, optionsOrFirstChild && optionsOrFirstChild.constructor === Object ? (options = optionsOrFirstChild, 2) : 1);
    if (typeof viewOrHAML === 'string') {
      if (m = /^(\w+)?(#([\w\-]+))*(\.[\w\.\-]+)?$/.exec(viewOrHAML)) {
        parent = document.createElement(m[1] || 'div');
        if (m[3]) {
          parent.setAttribute('id', m[3]);
        }
        if (m[4]) {
          parent.className = m[4].slice(1).replace(/\./g, ' ');
        }
        for (k in options) {
          v = options[k];
          if (isBind(v)) {
            bind = new AttrBind(parent, k, _.bind(v, this));
            this._binds.push(bind);
            bind.needRender();
            bind.render(this);
          } else {
            parent.setAttribute(k, v);
          }
        }
      }
    } else if (viewOrHAML && viewOrHAML.prototype instanceof Backbone.View) {
      parent = (new viewOrHAML(options)).render().el;
    }
    if (parent) {
      this._renderChildren(children, parent);
      return parent;
    }
  };
  __if = function(condition, thenElse) {
    var _name;
    if (typeof condition === 'function') {
      return new IfBind(void 0, condition, thenElse.then, thenElse["else"]);
    } else {
      return typeof thenElse[_name = condition ? 'then' : 'else'] === "function" ? thenElse[_name]() : void 0;
    }
  };
  __each = function(col, renderer) {
    var i, item, _i, _len, _results;
    if (col instanceof Backbone.Collection) {
      return col.map(renderer);
    } else {
      _results = [];
      for (i = _i = 0, _len = col.length; _i < _len; i = ++_i) {
        item = col[i];
        _results.push(renderer(item, i, col));
      }
      return _results;
    }
  };
  Bind = function(parent, getValue) {
    this.parent = parent;
    this.getValue = getValue;
  };
  Bind.prototype.value = void 0;
  Bind.prototype.nodes = void 0;
  Bind.prototype.getRenderValue = function() {
    return this.value;
  };
  Bind.prototype.needRender = function() {
    var value;
    if ((value = this.getValue()) !== this.value) {
      this.value = value;
      return true;
    } else {
      return false;
    }
  };
  Bind.prototype.render = function(view, rendered) {
    var n, nodes, renderValue, _i, _j, _len, _len1, _ref, _ref1;
    renderValue = this.getRenderValue();
    if (renderValue == null) {
      renderValue = [document.createTextNode('')];
    }
    nodes = view._renderChildren(renderValue, this.parent, (_ref = this.nodes) != null ? _ref[0] : void 0);
    if (this.nodes) {
      _ref1 = this.nodes;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        n = _ref1[_i];
        this.parent.removeChild(n);
      }
    }
    this.nodes = nodes;
    if (rendered) {
      for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
        n = nodes[_j];
        rendered.push(n);
      }
    }
  };
  IfBind = function(parent, getValue, then, _else) {
    this.parent = parent;
    this.getValue = getValue;
    this.then = then;
    this["else"] = _else;
    this.getRenderValue = function() {
      if (this.value) {
        return this.then();
      } else {
        return this["else"]();
      }
    };
    return this;
  };
  IfBind.prototype = Bind.prototype;
  AttrBind = function(parent, attr, getValue) {
    this.parent = parent;
    this.attr = attr;
    this.getValue = getValue;
  };
  AttrBind.prototype.value = void 0;
  AttrBind.prototype.needRender = Bind.prototype.needRender;
  AttrBind.prototype.render = function() {
    this.parent.setAttribute(this.attr, this.value);
  };
  return module = {
    Cell: Backbone.View.extend({
      constructor: function() {
        var bindUpdater;
        this._binds = [];
        this.__ = _.bind(this.__, this);
        this.__["if"] = __if;
        this.__.each = __each;
        Backbone.View.apply(this, arguments);
        if ((bindUpdater = this.model || this.collection)) {
          return this.listenTo(bindUpdater, 'all', this.updateBinds);
        }
      },
      _renderChildren: function(nodes, parent, insertBeforeNode, rendered) {
        var bind, n, tn, _i, _len, _ref;
        if (insertBeforeNode == null) {
          insertBeforeNode = null;
        }
        if (rendered == null) {
          rendered = [];
        }
        if (nodes == null) {
          return rendered;
        }
        if (!isArrayish(nodes)) {
          nodes = [nodes];
        }
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          n = nodes[_i];
          if (n != null) {
            if ((_ref = n.nodeType) === 1 || _ref === 3) {
              rendered.push(parent.insertBefore(n, insertBeforeNode));
            } else if (isArrayish(n)) {
              this._renderChildren(n, parent, insertBeforeNode, rendered);
            } else if (isBind(n)) {
              this._binds.push(bind = new Bind(parent, _.bind(n, this)));
              bind.needRender();
              bind.render(this, rendered);
            } else if (n instanceof Bind) {
              this._binds.push(n);
              n.parent = parent;
              n.needRender();
              n.render(this, rendered);
            } else {
              tn = document.createTextNode(n);
              rendered.push(parent.insertBefore(tn, insertBeforeNode));
            }
          }
        }
        return rendered;
      },
      __: __,
      render: function() {
        this._renderChildren(this.renderEl(this.__), this.el);
        this.afterRender();
        return this;
      },
      updateBinds: function() {
        var b, change, i, _i, _len, _ref;
        i = 0;
        change = true;
        while (change && (i++ < 10)) {
          change = false;
          _ref = this._binds;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            b = _ref[_i];
            if (b.needRender()) {
              change = true;
              b.render(this);
            }
          }
        }
      },
      remove: function() {
        delete cidMap[this.cid];
        this.el.cellcid = void 0;
        if (this.$el) {
          this.$el.remove();
        }
        this.stopListening();
        this.model = this.collection = this.el = this.$el = this.$ = void 0;
      },
      _setElement: Backbone.View.prototype.setElement,
      setElement: function(element, delegate) {
        this._setElement(element, delegate);
        cidMap[this.cid] = this;
        this.el.setAttribute('cell', this._cellName);
        this.el.cellcid = this.cid;
        return this;
      },
      renderEl: function() {},
      afterRender: function() {}
    }),
    pluginBuilder: 'cell-builder-plugin',
    load: function(name, req, load, config) {
      var el;
      if (!(module._installed || (module._installed = {}))[name]) {
        module._installed[name] = true;
        el = document.createElement('link');
        el.href = req.toUrl(name + ".css");
        el.rel = 'stylesheet';
        el.type = 'text/css';
        document.head.appendChild(el);
      }
      load(function(proto) {
        proto || (proto = {});
        proto.className = proto._cellName = /(.*\/)?(.*)$/.exec(name)[2];
        return module.Cell.extend(proto);
      });
    }
  };
});
