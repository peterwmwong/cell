// Generated by CoffeeScript 1.3.3

define(function(require) {
  var $, Backbone, exp, pic;
  Backbone = require('backbone');
  $ = require('jquery');
  $(function() {
    $('[data-cell]').each(function(i, el) {
      var cellname;
      if (cellname = this.getAttribute('data-cell')) {
        require(["cell!" + cellname], function(CType) {
          el.appendChild(new CType().render().el);
        });
      }
    });
  });
  $.fn.remove = function(selector, keepData) {
    var $elem, elem, i;
    elem = void 0;
    i = 0;
    while ((elem = this[i++]) != null) {
      if (!selector || jQuery.filter(selector, [elem]).length) {
        if (!keepData && elem.nodeType === 1) {
          $elem = $(elem);
          if ($elem.attr('cell')) {
            $elem.triggerHandler('cell-remove');
          }
          $('[cell]', $elem).each(function() {
            return $(this).triggerHandler('cell-remove');
          });
          jQuery.cleanData(elem.getElementsByTagName("*"));
          jQuery.cleanData([elem]);
        }
        if (elem.parentNode) {
          elem.parentNode.removeChild(elem);
        }
      }
    }
    return this;
  };
  pic = void 0;
  return exp = {
    Cell: Backbone.View.extend({
      setElement: function(element, delegate) {
        var onCellRemove,
          _this = this;
        Backbone.View.prototype.setElement.call(this, element, delegate);
        this.$el.attr('cell', this.name).on('cell-remove', onCellRemove = function() {
          var _ref, _ref1;
          _this.$el.off('cell-remove', onCellRemove);
          if ((_ref = _this.model) != null) {
            _ref.off(null, null, _this);
          }
          if ((_ref1 = _this.collection) != null) {
            _ref1.off(null, null, _this);
          }
          _this.undelegateEvents();
          return _this.model = _this.collection = _this.el = _this.$el = _this.$ = void 0;
        });
        return this;
      },
      render: function() {
        this.render_el && (this.el.innerHTML = this.render_el());
        if (typeof this.after_render === "function") {
          this.after_render();
        }
        return this;
      }
    }),
    pluginBuilder: 'cell-builder-plugin',
    load: function(name, req, load, config) {
      req([name], function(def) {
        var el;
        if (def !== Object(def)) {
          throw "Couldn't load " + name + " cell";
        }
        pic || (pic = (exp.__preinstalledCells__ || (exp.__preinstalledCells__ = {})));
        if (!pic[name]) {
          pic[name] = true;
          el = document.createElement('link');
          el.href = req.toUrl("" + name + ".css");
          el.rel = 'stylesheet';
          el.type = 'text/css';
          $('head').append(el);
        }
        def.className = def.name = /(.*\/)?(.*)$/.exec(name)[2];
        def.render_el || (def.render_el = $.noop);
        def.after_render || (def.after_render = $.noop);
        load(exp.Cell.extend(def));
      });
    }
  };
});
