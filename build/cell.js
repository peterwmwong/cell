// Generated by CoffeeScript 1.3.1
var __slice = [].slice;

define(function() {
  var $, Cell, E, doc, exports, window, _range, _renderNodes;
  E = typeof (typeof console !== "undefined" && console !== null ? console.error : void 0) === 'function' ? (function() {
    var msg;
    msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.error.apply(console, msg);
  }) : function() {};
  $ = (window = this).$;
  doc = window.document || {
    createElement: function() {}
  };
  _range = doc.createRange();
  _renderNodes = function(parent, nodes) {
    var c, _ref;
    while (nodes.length > 0) {
      if ((c = nodes.shift()) != null) {
        if (_.isElement(c)) {
          parent.appendChild(c);
        } else if (c.jquery) {
          c.appendTo(parent);
        } else if ((_ref = typeof c) === 'string' || _ref === 'number') {
          parent.appendChild(doc.createTextNode(c));
        } else if (_.isArray(c)) {
          Array.prototype.unshift.apply(nodes, c);
        } else {
          E("render_el: unsupported render element", c);
        }
      }
    }
    return parent;
  };
  $(doc).ready(function() {
    _range.selectNode(doc.body);
    $('[data-cell]').each(function() {
      var cellname,
        _this = this;
      if (cellname = this.getAttribute('data-cell')) {
        require(["cell!" + cellname], function(CType) {
          _this.appendChild(new CType().render().el);
        });
      }
    });
  });
  return exports = {
    Cell: Cell = Backbone.View.extend({
      render: function() {
        this.el.innerHTML = '';
        _renderNodes(this.el, [this.render_el()]);
        this.after_render();
        return this;
      }
    }),
    pluginBuilder: 'cell-builder-plugin',
    load: function(name, req, load, config) {
      req([name], function(CDef) {
        var el, _ref;
        if (typeof CDef !== 'object') {
          E("cell!: Couldn't load " + name + " cell. cell definitions should be objects, but instead was " + (typeof CDef));
        } else {
          if (!(((_ref = exports.__preinstalledCells__) != null ? _ref[name] : void 0) != null)) {
            (exports.__preinstalledCells__ || (exports.__preinstalledCells__ = {}))[name] = true;
            el = doc.createElement('link');
            el.href = req.toUrl("" + name + ".css");
            el.rel = 'stylesheet';
            el.type = 'text/css';
            $('head')[0].appendChild(el);
          }
          CDef.className = CDef.name = /(.*\/)?(.*)$/.exec(name)[2];
          CDef.render_el || (CDef.render_el = $.noop);
          CDef.after_render || (CDef.after_render = $.noop);
          load(Cell.extend(CDef));
        }
      });
    }
  };
});
