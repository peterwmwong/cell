// Generated by CoffeeScript 1.4.0

define(['cell', 'jquery', 'underscore', 'backbone', 'ref'], function(cell, $, _, Backbone, ref) {
  var __, _isJQueryish, _isObj, _onReferenceChangeAttr, _onReferenceChangeChild, _renderNodes;
  _isJQueryish = typeof Zepto === 'function' ? Zepto.fn.isPrototypeOf.bind(Zepto.fn) : function(o) {
    return o.jquery;
  };
  _isObj = function(o) {
    return o && o.constructor === Object;
  };
  _onReferenceChangeChild = function(ref, val) {
    var newNodes, parent, target;
    newNodes = _renderNodes([val]);
    if (this.prevNodes && this.prevNodes.length > 0) {
      target = this.prevNodes[0];
      parent = target.parentNode;
      _.each(newNodes, function(node) {
        return parent.insertBefore(node, target);
      });
      $(this.prevNodes).remove();
    }
    this.prevNodes = newNodes;
  };
  _onReferenceChangeAttr = function(ref, val) {
    this[0].setAttribute(this[1], val);
  };
  _renderNodes = function(nodes) {
    var c, ctx, rendered;
    rendered = [];
    while ((c = nodes.shift()) != null) {
      if (_.isElement(c)) {
        rendered.push(c);
      } else if (_isJQueryish(c)) {
        rendered = rendered.concat(c.toArray());
      } else if (_.isArray(c)) {
        nodes = c.concat(nodes);
      } else if (c instanceof ref.Reference) {
        ctx = {};
        c.onChangeAndDo(_onReferenceChangeChild, ctx);
        rendered = rendered.concat(ctx.prevNodes);
      } else {
        rendered.push(document.createTextNode(c));
      }
    }
    return rendered;
  };
  __ = function(viewOrHAML, optionsOrFirstChild) {
    var children, el, m, options, parent;
    if (!viewOrHAML) {
      return;
    }
    children = arguments.length === 0 ? [] : [].slice.call(arguments, 2);
    options = _isObj(optionsOrFirstChild) ? optionsOrFirstChild : (children.unshift(optionsOrFirstChild), void 0);
    parent = typeof viewOrHAML === 'string' ? (m = /^(\w+)?(#([\w\-]+))*(\.[\w\.\-]+)?$/.exec(viewOrHAML)) ? (el = document.createElement(m[1] || 'div'), m[3] ? el.setAttribute('id', m[3]) : void 0, m[4] ? el.className = m[4].slice(1).replace(/\./g, ' ') : void 0, _.each(options, function(v, k) {
      if (v instanceof ref.Reference) {
        v.onChangeAndDo(_onReferenceChangeAttr, [el, k]);
      } else {
        el.setAttribute(k, v);
      }
    }), el) : void 0 : viewOrHAML.prototype instanceof Backbone.View ? (new viewOrHAML(options)).render().el : void 0;
    if (!parent) {
      throw "__(): unsupported argument " + viewOrHAML;
    }
    _.each(_renderNodes(children), parent.appendChild, parent);
    return parent;
  };
  __.$ = function() {
    return $(__.apply(null, arguments));
  };
  cell.Cell.prototype.__ = __;
  cell.Cell.prototype.render = function() {
    _.each(_renderNodes([this.renderEl(this.__)]), this.el.appendChild, this.el);
    this.afterRender();
    return this;
  };
  return __;
});
